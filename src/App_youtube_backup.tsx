import React, { useState, useEffect } from 'react';

// ÌÉÄÏûÖ Ï†ïÏùò
interface DiaryEntry {
  id: string;
  date: string;
  time: string;
  mood: 'good' | 'normal' | 'bad';
  summary: string;
  keywords: string[];
  selectedEmotions: string[];
  customEmotion?: string;
  musicPlayed: MusicItem[];
  chatMessages: ChatMessage[];
  experienceGained: number;
  actionItems: string[];
  aiGenreSuggestion?: string;
  aiRecommendedMusic?: string;
  deletedAt?: string;
}

interface MusicItem {
  id: string;
  title: string;
  artist: string;
  genre: string;
  thumbnail: string;
  url: string;
  publishedAt: string;
  rating?: number;
  playCount?: number;
}

interface ChatMessage {
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  musicRecommendation?: MusicItem | null;
  hasMusic?: boolean;
}

interface UserProgress {
  level: number;
  experience: number;
  totalEntries: number;
  consecutiveDays: number;
  expToNext: number;
  progressPercentage: number;
  isPremium: boolean;
}

interface AppSettings {
  aiName: string;
  theme: 'purple' | 'blue' | 'pink';
  isPremium: boolean;
  notifications: boolean;
}

// ÏÉÅÏàò Ï†ïÏùò
const APP_PASSWORD = "2752";
const MAX_FREE_TOKENS = 100000;

// ÏùåÏïÖ Ïû•Î•¥ ÏàòÎ•º 4Í∞úÎ°ú Ï§ÑÏù¥Í≥† ÌÇ§ÏõåÎìúÎèÑ 2-3Í∞úÎ°ú Ï†úÌïú
const MUSIC_GENRES = {
  kpop: {
    name: "K-POP",
    icon: "üá∞üá∑",
    desc: "ÌïúÍµ≠ 10ÎåÄ ÌïÑÏàòÌÖú",
    searchKeywords: [
      "kpop 2025 official MV",
      "newjeans 2025 official MV",
      "aespa 2025 official MV"
    ]
  },
  healing: {
    name: "ÌûêÎßÅ ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏",
    icon: "üå∏",
    desc: "ÎßàÏùå Îã¨ÎûòÍ∏∞Ïö©",
    searchKeywords: [
      "2025 healing music official MV",
      "2025 relaxing piano official",
      "calm music 2025 official MV"
    ]
  },
  ballad: {
    name: "Î∞úÎùºÎìú",
    icon: "üé§",
    desc: "Í∞êÏ†ï ÌëúÌòÑÏö©",
    searchKeywords: [
      "korean ballad 2025 official MV",
      "iu 2025 official music video",
      "mamamoo 2025 ballad official"
    ]
  },
  pop: {
    name: "ÌåùÏÜ°",
    icon: "üåç",
    desc: "Ìï¥Ïô∏ Ïù∏Í∏∞Í≥°Îì§",
    searchKeywords: [
      "pop music 2025 official MV",
      "billboard hits 2025 official",
      "taylor swift 2025 official MV"
    ]
  }
};

const LEVEL_SYSTEM = {
  experienceBase: {
    1: 0, 2: 100, 3: 250, 4: 450, 5: 700,
    6: 1000, 7: 1350, 8: 1750, 9: 2200, 10: 2700,
    11: 3250, 12: 3850, 13: 4500, 14: 5200, 15: 6000
  },
  experienceGain: {
    diaryWrite: 20,
    musicSession: 10,
    consecutiveDays: 25,
    musicRating: 5,
    friendShare: 15,
    achievementUnlock: 50
  }
};

const THEMES = {
  purple: {
    name: 'Ïù¥ÌîåÎ¶¨ ÌçºÌîå',
    primary: 'from-purple-500 to-pink-500',
    secondary: 'from-purple-100 to-pink-100',
    accent: 'purple-500',
    bgClass: 'from-purple-100 to-pink-100'
  },
  blue: {
    name: 'ÎÆ§ÏßÅ Î∏îÎ£®',
    primary: 'from-blue-500 to-cyan-500',
    secondary: 'from-blue-100 to-cyan-100',
    accent: 'blue-500',
    bgClass: 'from-blue-100 to-cyan-100'
  },
  pink: {
    name: 'Í∞êÏÑ± ÌïëÌÅ¨',
    primary: 'from-pink-500 to-rose-500',
    secondary: 'from-pink-100 to-rose-100',
    accent: 'pink-500',
    bgClass: 'from-pink-100 to-rose-100'
  }
};

const AI_NAMES = ["Î£®ÎÇò", "Î©úÎ°úÎîî", "ÌïòÎ™®Îãà", "Î¶¨Îì¨", "ÎÆ§Ï¶à"];

const EMOTION_OPTIONS = [
  "ÌñâÎ≥µ", "Í∏∞ÏÅ®", "ÏÑ§Î†ò", "Í∞êÏÇ¨", "ÎßåÏ°±", "ÌèâÏò®", "Ï∞®Î∂Ñ", "Ìé∏Ïïà",
  "Í±±Ï†ï", "Î∂àÏïà", "Ïä§Ìä∏Î†àÏä§", "ÌîºÍ≥§", "Ïö∞Ïö∏", "Ïä¨Ìîî", "ÌôîÎÇ®", "ÏßúÏ¶ù",
  "Ïô∏Î°úÏõÄ", "ÏïÑÏâ¨ÏõÄ", "ÌõÑÌöå", "Î∂ÄÎÅÑÎü¨ÏõÄ", "ÎÜÄÎùºÏõÄ", "ÌòºÎûÄ", "Î¨¥Í∏∞Î†•", "ÏßÄÎ£®Ìï®"
];

const App: React.FC = () => {
  // ÏÉÅÌÉú Í¥ÄÎ¶¨
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [currentStep, setCurrentStep] = useState<'login' | 'mood' | 'chat' | 'genre' | 'music' | 'summary' | 'stats' | 'settings' | 'trash' | 'calendar' | 'search' | 'myDiary' | 'myMusic'>('login');
  const [currentMood, setCurrentMood] = useState<'good' | 'normal' | 'bad' | null>(null);
  const [selectedGenre, setSelectedGenre] = useState<string | null>(null);
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);
  const [diaryEntries, setDiaryEntries] = useState<DiaryEntry[]>([]);
  const [trashEntries, setTrashEntries] = useState<DiaryEntry[]>([]);
  const [personalMusic, setPersonalMusic] = useState<MusicItem[]>([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [currentCalendarMonth, setCurrentCalendarMonth] = useState(new Date());
  const [summaryData, setSummaryData] = useState<any>(null);
  const [selectedEmotions, setSelectedEmotions] = useState<string[]>([]);
  const [customEmotion, setCustomEmotion] = useState('');
  const [userProgress, setUserProgress] = useState<UserProgress>({
    level: 1,
    experience: 0,
    totalEntries: 0,
    consecutiveDays: 0,
    expToNext: 100,
    progressPercentage: 0,
    isPremium: false
  });
  const [appSettings, setAppSettings] = useState<AppSettings>({
    aiName: 'Î£®ÎÇò',
    theme: 'purple',
    isPremium: false,
    notifications: true
  });
  const [currentInput, setCurrentInput] = useState("");
  const [selectedMusic, setSelectedMusic] = useState<MusicItem | null>(null);
  const [recommendedMusic, setRecommendedMusic] = useState<MusicItem[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [tokenUsage, setTokenUsage] = useState(0);
  const [expandedDiaryId, setExpandedDiaryId] = useState<string | null>(null);
  const [conversationCount, setConversationCount] = useState(0);
  const [usedMusicIds, setUsedMusicIds] = useState<Set<string>>(new Set());

  // API ÌÇ§ ÏÑ§Ï†ï - ÌôòÍ≤ΩÎ≥ÄÏàòÎÇò .env ÌååÏùºÏóêÏÑú Í∞ÄÏ†∏Ïò§Í∏∞
  const OPENAI_API_KEY = process.env.REACT_APP_OPENAI_API_KEY || "";
  const YOUTUBE_API_KEY = process.env.REACT_APP_YOUTUBE_API_KEY || "";

  // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  useEffect(() => {
    const loadData = () => {
      try {
        const savedEntries = localStorage.getItem('diaryEntries');
        const savedProgress = localStorage.getItem('userProgress');
        const savedAuth = localStorage.getItem('isAuthenticated');
        const savedTokenUsage = localStorage.getItem('tokenUsage');
        const savedTrashEntries = localStorage.getItem('trashEntries');
        const savedPersonalMusic = localStorage.getItem('personalMusic');
        const savedSettings = localStorage.getItem('appSettings');
        const savedUsedMusicIds = localStorage.getItem('usedMusicIds');

        if (savedEntries) setDiaryEntries(JSON.parse(savedEntries));
        if (savedProgress) setUserProgress(JSON.parse(savedProgress));
        if (savedAuth) setIsAuthenticated(JSON.parse(savedAuth));
        if (savedTokenUsage) setTokenUsage(JSON.parse(savedTokenUsage));
        if (savedTrashEntries) setTrashEntries(JSON.parse(savedTrashEntries));
        if (savedPersonalMusic) setPersonalMusic(JSON.parse(savedPersonalMusic));
        if (savedSettings) setAppSettings(JSON.parse(savedSettings));
        if (savedUsedMusicIds) {
          const parsedIds = JSON.parse(savedUsedMusicIds);
          setUsedMusicIds(new Set(Array.isArray(parsedIds) ? parsedIds : []));
        }
      } catch (error) {
        console.error('Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïò§Î•ò:', error);
      }
    };

    loadData();
  }, []);

  // Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
  useEffect(() => {
    try {
      localStorage.setItem('diaryEntries', JSON.stringify(diaryEntries));
      localStorage.setItem('userProgress', JSON.stringify(userProgress));
      localStorage.setItem('isAuthenticated', JSON.stringify(isAuthenticated));
      localStorage.setItem('tokenUsage', JSON.stringify(tokenUsage));
      localStorage.setItem('trashEntries', JSON.stringify(trashEntries));
      localStorage.setItem('personalMusic', JSON.stringify(personalMusic));
      localStorage.setItem('appSettings', JSON.stringify(appSettings));
      localStorage.setItem('usedMusicIds', JSON.stringify(Array.from(usedMusicIds)));
    } catch (error) {
      console.error('Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• Ïò§Î•ò:', error);
    }
  }, [diaryEntries, userProgress, isAuthenticated, tokenUsage, trashEntries, personalMusic, appSettings, usedMusicIds]);

  // Ïú†Ìã∏Î¶¨Ìã∞ Ìï®Ïàò
  const generateId = () => Date.now().toString() + Math.random().toString(36).substr(2, 9);

  const formatDate = (date: Date) => date.toLocaleDateString('ko-KR');
  const formatTime = (date: Date) => date.toLocaleTimeString('ko-KR', { hour: '2-digit', minute: '2-digit' });

  const getMoodEmoji = (mood: string) => {
    switch (mood) {
      case 'good': return 'üòä';
      case 'normal': return 'üòê';
      case 'bad': return 'üòî';
      default: return '‚ùì';
    }
  };

  const getMoodText = (mood: string) => {
    switch (mood) {
      case 'good': return 'Ï¢ãÏùå';
      case 'normal': return 'Î≥¥ÌÜµ';
      case 'bad': return 'ÎÇòÏÅ®';
      default: return 'ÏÑ†ÌÉù ÏïàÌï®';
    }
  };

  const calculateLevel = (experience: number) => {
    for (let level = 15; level >= 1; level--) {
      if (experience >= LEVEL_SYSTEM.experienceBase[level as keyof typeof LEVEL_SYSTEM.experienceBase]) {
        return level;
      }
    }
    return 1;
  };

  const updateExperience = (expGained: number) => {
    const newExp = userProgress.experience + expGained;
    const level = calculateLevel(newExp);
    const currentLevelExp = LEVEL_SYSTEM.experienceBase[level as keyof typeof LEVEL_SYSTEM.experienceBase] || 0;
    const nextLevelExp = LEVEL_SYSTEM.experienceBase[(level + 1) as keyof typeof LEVEL_SYSTEM.experienceBase] || newExp;
    const expToNext = nextLevelExp - newExp;
    const expProgress = newExp - currentLevelExp;
    const expNeeded = nextLevelExp - currentLevelExp;
    const progressPercentage = expNeeded > 0 ? (expProgress / expNeeded) * 100 : 100;

    setUserProgress(prev => ({
      ...prev,
      level,
      experience: newExp,
      expToNext: Math.max(0, expToNext),
      progressPercentage: Math.min(100, progressPercentage),
      totalEntries: prev.totalEntries + (expGained === LEVEL_SYSTEM.experienceGain.diaryWrite ? 1 : 0)
    }));

    if (level > userProgress.level) {
      alert(`Ï∂ïÌïòÌï©ÎãàÎã§! Î†àÎ≤® ${level}Î°ú Î†àÎ≤®ÏóÖÌñàÏäµÎãàÎã§!`);
    }
  };

  // Ìú¥ÏßÄÌÜµ Í¥ÄÎ†® Ìï®ÏàòÎì§
  const moveToTrash = (entry: DiaryEntry) => {
    const deletedEntry = { ...entry, deletedAt: new Date().toISOString() };
    setTrashEntries(prev => [...prev, deletedEntry]);
    setDiaryEntries(prev => prev.filter(e => e.id !== entry.id));
  };

  const restoreFromTrash = (entry: DiaryEntry) => {
    const restoredEntry = { ...entry };
    delete restoredEntry.deletedAt;
    setDiaryEntries(prev => [...prev, restoredEntry]);
    setTrashEntries(prev => prev.filter(e => e.id !== entry.id));
  };

  // Í≤ÄÏÉâ Ìï®Ïàò
  const searchDiaries = (query: string) => {
    if (!query.trim()) return [];
    
    const lowerQuery = query.toLowerCase();
    return diaryEntries.filter(entry => 
      entry.summary.toLowerCase().includes(lowerQuery) ||
      entry.keywords.some(keyword => keyword.toLowerCase().includes(lowerQuery)) ||
      entry.selectedEmotions.some(emotion => emotion.toLowerCase().includes(lowerQuery)) ||
      entry.musicPlayed.some(music => music.title.toLowerCase().includes(lowerQuery)) ||
      entry.actionItems.some(action => action.toLowerCase().includes(lowerQuery))
    );
  };

  // OpenAI API Ìò∏Ï∂ú
  const callOpenAI = async (messages: any[], systemPrompt: string) => {
    if (!OPENAI_API_KEY) {
      throw new Error('OpenAI API ÌÇ§Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
    }

    if (tokenUsage >= MAX_FREE_TOKENS) {
      throw new Error('AIÏôÄ ÎåÄÌôîÌï† Ïàò ÏûàÎäî ÏóêÎÑàÏßÄÍ∞Ä Îã§ Îñ®Ïñ¥Ï°åÏäµÎãàÎã§.');
    }

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemPrompt },
          ...messages
        ],
        temperature: 0.7,
        max_tokens: 300
      })
    });

    if (!response.ok) {
      throw new Error(`OpenAI API Ïò§Î•ò: ${response.status}`);
    }

    const data = await response.json();
    const tokensUsed = data.usage?.total_tokens || 0;
    setTokenUsage(prev => prev + tokensUsed);

    return data.choices?.[0]?.message?.content;
  };

  // YouTube API Ìò∏Ï∂ú - Îã®Ïùº Í≤ÄÏÉâÏúºÎ°ú ÏµúÏ†ÅÌôî
  const searchYouTubeMusic = async (query: string): Promise<MusicItem | null> => {
    if (!YOUTUBE_API_KEY) {
      console.error('YouTube API ÌÇ§Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
      return null;
    }

    try {
      const searchQuery = `${query} official MV`;
      const url = `https://www.googleapis.com/youtube/v3/search?` +
        `part=snippet&` +
        `q=${encodeURIComponent(searchQuery)}&` +
        `type=video&` +
        `maxResults=5&` +
        `order=relevance&` +
        `videoDuration=medium&` +
        `regionCode=KR&` +
        `key=${YOUTUBE_API_KEY}`;

      const response = await fetch(url);

      if (!response.ok) {
        console.error('YouTube API Error:', response.status, response.statusText);
        return null;
      }

      const data = await response.json();
      
      if (data.items && data.items.length > 0) {
        // ÏÇ¨Ïö©ÎêòÏßÄ ÏïäÏùÄ ÏùåÏïÖ Ï∞æÍ∏∞
        for (const item of data.items) {
          const videoId = item.id.videoId;
          if (!usedMusicIds.has(videoId)) {
            // ÏÉàÎ°úÏö¥ ÏùåÏïÖ Î∞úÍ≤¨ Ïãú ÏÇ¨Ïö© Î™©Î°ùÏóê Ï∂îÍ∞Ä
            setUsedMusicIds(prev => new Set([...Array.from(prev), videoId]));
            
            return {
              id: videoId,
              title: item.snippet.title,
              artist: item.snippet.channelTitle,
              genre: 'recommended',
              thumbnail: item.snippet.thumbnails.medium.url,
              url: `https://www.youtube.com/watch?v=${videoId}`,
              publishedAt: item.snippet.publishedAt,
              rating: 0,
              playCount: 0
            };
          }
        }
        
        // Î™®Îì† Í≤∞Í≥ºÍ∞Ä Ï§ëÎ≥µÏù¥Î©¥ Ï≤´ Î≤àÏß∏ Í≤∞Í≥º Î∞òÌôò
        const item = data.items[0];
        return {
          id: item.id.videoId,
          title: item.snippet.title,
          artist: item.snippet.channelTitle,
          genre: 'recommended',
          thumbnail: item.snippet.thumbnails.medium.url,
          url: `https://www.youtube.com/watch?v=${item.id.videoId}`,
          publishedAt: item.snippet.publishedAt,
          rating: 0,
          playCount: 0
        };
      }
    } catch (error) {
      console.error('YouTube Í≤ÄÏÉâ Ïò§Î•ò:', error);
    }

    return null;
  };

  // Í∞úÏù∏ ÎßûÏ∂§ ÏùåÏïÖÏóê Ï∂îÍ∞Ä
  const addToPersonalMusic = (music: MusicItem) => {
    setPersonalMusic(prev => {
      const existingIndex = prev.findIndex(m => m.id === music.id);
      if (existingIndex >= 0) {
        const updated = [...prev];
        updated[existingIndex] = {
          ...updated[existingIndex],
          playCount: (updated[existingIndex].playCount || 0) + 1
        };
        return updated;
      } else {
        return [...prev, { ...music, playCount: 1 }];
      }
    });
  };

  // AI ÏùëÎãµ ÏÉùÏÑ±
  const getAIResponse = async (userMessage: string, conversationHistory: ChatMessage[]) => {
    const conversationNum = conversationCount + 1;
    setConversationCount(conversationNum);

    // ÏùåÏïÖ Ï∂îÏ≤ú ÌÇ§ÏõåÎìú Í∞êÏßÄ
    const musicKeywords = ['ÏùåÏïÖ', 'ÎÖ∏Îûò', 'Îì£Í≥† Ïã∂Ïñ¥', 'Ï∂îÏ≤ú', 'ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏', 'Î©úÎ°úÎîî', 'song', 'music'];
    const hasMusicRequest = musicKeywords.some(keyword => 
      userMessage.toLowerCase().includes(keyword)
    );

    let systemPrompt = `ÎãπÏã†ÏùÄ ${appSettings.aiName}ÏûÖÎãàÎã§. ÏÇ¨Ïö©ÏûêÏùò Í∞êÏ†ïÏóê ÎßûÎäî ÏùåÏïÖÏùÑ Ï∂îÏ≤úÌïòÎäî Ï†ÑÎ¨∏ AI ÏΩîÏπòÏûÖÎãàÎã§.

ÌòÑÏû¨ ÎåÄÌôî ÏÉÅÌô©:
- ÎåÄÌôî ÌöüÏàò: ${conversationNum}Î≤àÏß∏
- ÏÇ¨Ïö©Ïûê Í∞êÏ†ï ÏÉÅÌÉú: ${currentMood ? getMoodText(currentMood) : 'ÏÑ†ÌÉù ÏïàÌï®'}
- ÏÇ¨Ïö©Ïûê Î†àÎ≤®: ${userProgress.level}

ÎåÄÌôî Í∑úÏπô:
1. Ï≤´ Î≤àÏß∏ ÎåÄÌôî: ÏπúÍ∑ºÌïòÍ≤å Ïù∏ÏÇ¨ÌïòÍ≥† Ïò§Îäò ÌïòÎ£®Ïóê ÎåÄÌï¥ Î¨ªÍ∏∞
2. Îëê Î≤àÏß∏ ÎåÄÌôî: ÏÇ¨Ïö©Ïûê Ïù¥ÏïºÍ∏∞Ïóê Í≥µÍ∞êÌïòÍ≥† Ï∂îÍ∞Ä ÏßàÎ¨∏ÌïòÍ∏∞
3. ÏÑ∏ Î≤àÏß∏ ÎåÄÌôîÎ∂ÄÌÑ∞: ÏûêÏó∞Ïä§ÎüΩÍ≤å ÏùåÏïÖ Ï∂îÏ≤ú Ï†úÏïàÌïòÍ∏∞
4. ÏùåÏïÖ ÏöîÏ≤≠Ïù¥ ÏûàÏúºÎ©¥: 2025ÎÖÑ ÏµúÏã† Í≥° Ï§ëÏóêÏÑú Íµ¨Ï≤¥Ï†ÅÏù∏ Í≥°Î™ÖÍ≥º ÏïÑÌã∞Ïä§Ìä∏Î•º Ï∂îÏ≤úÌïòÎêò, "[MUSIC_SEARCH: Í≥°Î™Ö - ÏïÑÌã∞Ïä§Ìä∏]" ÌòïÌÉúÎ°ú ÎÅùÏóê Ï∂îÍ∞Ä

Ï∂îÏ≤ú Ïö∞ÏÑ†ÏàúÏúÑ ÏùåÏïÖ (2025ÎÖÑ Í∏∞Ï§Ä):
- K-pop: DemonhuntersÏùò Golden, Soda pop Îì±
- ÏµúÏã† ÌïúÍµ≠ ÎìúÎùºÎßà OST 2025
- ÏòÅÌôî OST 2025

ÏùëÎãµ Ïä§ÌÉÄÏùº:
- ÏπúÍ∑ºÌïòÍ≥† Í≥µÍ∞êÏ†ÅÏù∏ ÌÜ§ (Ï°¥ÎåìÎßê ÏÇ¨Ïö©)
- Í∞ÑÍ≤∞ÌïòÍ≥† ÏûêÏó∞Ïä§Îü¨Ïö¥ ÏùëÎãµ (1-2Î¨∏Ïû•)
- ÎãµÎ≥Ä ÏãúÏûëÏù¥ÎÇò Ï§ëÍ∞ÑÏóê Í∑ÄÏó¨Ïö¥ Ïù¥Î™®ÏßÄ ÌïòÎÇòÏî© Ï∂îÍ∞Ä (üéµ, üíï, ‚ú®, üåü, üé∂, üíú Îì±)

ÌòÑÏû¨ ÏÉÅÌô©: ${conversationNum <= 2 ? 'ÏïÑÏßÅ ÏùåÏïÖ Ï∂îÏ≤ú Îã®Í≥ÑÍ∞Ä ÏïÑÎãò. ÎåÄÌôîÎ•º Îçî ÎÇòÎàÑÍ∏∞' : 'ÏùåÏïÖ Ï∂îÏ≤úÏùÑ ÏûêÏó∞Ïä§ÎüΩÍ≤å Ï†úÏïàÌï† Ïàò ÏûàÎäî Îã®Í≥Ñ'}`;

    if (hasMusicRequest) {
      systemPrompt += `\n\nÏùåÏïÖ ÏöîÏ≤≠ Í∞êÏßÄ: ÏÇ¨Ïö©ÏûêÍ∞Ä ÏùåÏïÖÏùÑ ÏõêÌïòÎØÄÎ°ú 2025ÎÖÑ Ïã†Í≥° Ï§ëÏóêÏÑú Íµ¨Ï≤¥Ï†ÅÏù∏ Í≥°ÏùÑ Ï∂îÏ≤úÌïòÍ≥† "[MUSIC_SEARCH: Í≥°Î™Ö - ÏïÑÌã∞Ïä§Ìä∏]" ÌòïÏãùÏúºÎ°ú Í≤ÄÏÉâÏñ¥Î•º Ìè¨Ìï®Ìï¥Ï£ºÏÑ∏Ïöî.`;
    }

    const messages = conversationHistory.slice(-5).map(msg => ({
      role: msg.role,
      content: msg.content
    }));

    messages.push({ role: 'user', content: userMessage });

    const aiResponse = await callOpenAI(messages, systemPrompt);
    
    // ÏùåÏïÖ Í≤ÄÏÉâ ÏöîÏ≤≠Ïù¥ Ìè¨Ìï®ÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏
    const musicSearchMatch = aiResponse.match(/\[MUSIC_SEARCH: ([^\]]+)\]/);
    if (musicSearchMatch) {
      const searchQuery = musicSearchMatch[1];
      const cleanResponse = aiResponse.replace(/\[MUSIC_SEARCH: [^\]]+\]/, '').trim();
      
      try {
        const musicResult = await searchYouTubeMusic(searchQuery);
        if (musicResult) {
          return {
            response: cleanResponse,
            music: musicResult
          };
        }
      } catch (error) {
        console.error('ÏùåÏïÖ Í≤ÄÏÉâ Ïò§Î•ò:', error);
      }
    }

    return { response: aiResponse, music: null };
  };

  // ÎåÄÌôî ÏöîÏïΩ ÏÉùÏÑ±
  const generateConversationSummary = async (messages: ChatMessage[]) => {
    const userMessages = messages.filter(msg => msg.role === 'user').map(msg => msg.content).join('\n');

    if (!userMessages.trim()) {
      return {
        summary: 'Ïò§ÎäòÎèÑ Í∞êÏ†ïÏùÑ ÎÇòÎàÑÎ©∞ Ïù¥ÏïºÍ∏∞Î•º Ìï¥Î¥§Ïñ¥Ïöî',
        keywords: ['#Í∞êÏ†ïÎÇòÎàî'],
        recommendedEmotions: ['ÌèâÏò®', 'ÎßåÏ°±', 'Ìé∏Ïïà'],
        actionItems: ['Ïò§ÎäòÎèÑ Í≥†ÏÉù ÎßéÏïòÏñ¥Ïöî', 'Ï∂©Î∂ÑÌïú Ìú¥ÏãùÏùÑ Ï∑®ÌïòÏÑ∏Ïöî'],
      };
    }

    const systemPrompt = `Îã§Ïùå ÎåÄÌôî ÎÇ¥Ïö©ÏùÑ Î∂ÑÏÑùÌï¥ÏÑú Í∞êÏ†ï ÏùºÍ∏∞ Í¥ÄÏ†êÏóêÏÑú ÏùëÎãµÌï¥Ï£ºÏÑ∏Ïöî:

ÎåÄÌôî ÎÇ¥Ïö©:
${userMessages}

ÌòÑÏû¨ Í∞êÏ†ï ÏÉÅÌÉú: ${currentMood ? getMoodText(currentMood) : 'ÏÑ†ÌÉù ÏïàÌï®'}
ÏÑ†ÌÉùÌïú ÏùåÏïÖ Ïû•Î•¥: ${selectedGenre ? MUSIC_GENRES[selectedGenre as keyof typeof MUSIC_GENRES]?.name : 'ÏÑ†ÌÉù ÏïàÌï®'}

Î∂ÑÏÑù ÏöîÏ≤≠:
1. Ïò§Îäò ÏûàÏóàÎçò ÏùºÏùÑ 1-2Ï§ÑÎ°ú ÏöîÏïΩ (Ìï¥ÏöîÏ≤¥Î°ú ÏûëÏÑ±, Í∞êÏ†ïÍ≥º ÏÉÅÌô© Ï§ëÏã¨)
2. ÎåÄÌôîÏóêÏÑú ÎäêÍª¥ÏßÑ Í∞êÏ†ï ÌÇ§ÏõåÎìú 5Í∞ú Ï∂îÏ∂ú (Ïòà: #Ïä§Ìä∏Î†àÏä§, #ÌñâÎ≥µ, #ÌîºÍ≥§Ìï® Îì±)
3. AIÍ∞Ä ÎåÄÌôîÏóêÏÑú Î∂ÑÏÑùÌïú ÏÑ∏Î∂Ä Í∞êÏ†ï 5Í∞ú Ï∂îÏ≤ú (Ïòà: ÌñâÎ≥µ, Í±±Ï†ï, ÏÑ§Î†ò, ÌîºÍ≥§, ÎßåÏ°± Îì±)
4. ÌòÑÏû¨ ÏÉÅÌô©Ïóê ÎßûÎäî Ïã§Ïö©Ï†ÅÏù∏ Ïï°ÏÖò ÏïÑÏù¥ÌÖú 2Í∞ú Ï†úÏïà

ÏùëÎãµ ÌòïÏãù:
ÏöîÏïΩ: [1-2Ï§Ñ ÏöîÏïΩ - Ìï¥ÏöîÏ≤¥]
Í∞êÏ†ïÌÇ§ÏõåÎìú: #ÌÇ§ÏõåÎìú1, #ÌÇ§ÏõåÎìú2, #ÌÇ§ÏõåÎìú3, #ÌÇ§ÏõåÎìú4, #ÌÇ§ÏõåÎìú5
Ï∂îÏ≤úÍ∞êÏ†ï: Í∞êÏ†ï1, Í∞êÏ†ï2, Í∞êÏ†ï3, Í∞êÏ†ï4, Í∞êÏ†ï5
Ïï°ÏÖòÏïÑÏù¥ÌÖú: ÏïÑÏù¥ÌÖú1 | ÏïÑÏù¥ÌÖú2`;

    try {
      const result = await callOpenAI([], systemPrompt);

      // ÏùëÎãµ ÌååÏã±
      const lines = result.split('\n');
      let summary = '';
      let keywords: string[] = [];
      let recommendedEmotions: string[] = [];
      let actionItems: string[] = [];

      for (const line of lines) {
        const trimmedLine = line.trim();
        if (trimmedLine.startsWith('ÏöîÏïΩ:')) {
          summary = trimmedLine.replace('ÏöîÏïΩ:', '').trim();
        } else if (trimmedLine.startsWith('Í∞êÏ†ïÌÇ§ÏõåÎìú:')) {
          const keywordText = trimmedLine.replace('Í∞êÏ†ïÌÇ§ÏõåÎìú:', '').trim();
          keywords = keywordText.split(',').map((k: string) => k.trim()).filter((k: string) => k);
        } else if (trimmedLine.startsWith('Ï∂îÏ≤úÍ∞êÏ†ï:')) {
          const emotionText = trimmedLine.replace('Ï∂îÏ≤úÍ∞êÏ†ï:', '').trim();
          recommendedEmotions = emotionText.split(',').map((e: string) => e.trim()).filter((e: string) => e);
        } else if (trimmedLine.startsWith('Ïï°ÏÖòÏïÑÏù¥ÌÖú:')) {
          const actionText = trimmedLine.replace('Ïï°ÏÖòÏïÑÏù¥ÌÖú:', '').trim();
          actionItems = actionText.split('|').map((a: string) => a.trim()).filter((a: string) => a);
        }
      }

      return {
        summary: summary || 'Ïò§ÎäòÏùò Í∞êÏ†ïÍ≥º ÏÉÅÌô©ÏùÑ ÎÇòÎàÑÏóàÏñ¥Ïöî',
        keywords: keywords.slice(0, 5),
        recommendedEmotions: recommendedEmotions.slice(0, 5),
        actionItems: actionItems.slice(0, 2)
      };
    } catch (error) {
      console.error('ÎåÄÌôî ÏöîÏïΩ ÏÉùÏÑ± Ïò§Î•ò:', error);
      return {
        summary: 'ÎåÄÌôî ÏöîÏïΩÏùÑ ÏÉùÏÑ±ÌïòÎäî Ï§ëÏóê Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏñ¥Ïöî',
        keywords: ['#Í∞êÏ†ïÎÇòÎàî'],
        recommendedEmotions: ['ÌèâÏò®', 'ÎßåÏ°±'],
        actionItems: ['ÏùåÏïÖÏúºÎ°ú ÎßàÏùåÏùÑ Îã¨ÎûòÎ≥¥ÏÑ∏Ïöî', 'Ï∂©Î∂ÑÌïú Ìú¥ÏãùÏùÑ Ï∑®ÌïòÏÑ∏Ïöî']
      };
    }
  };

  // Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨
  const handleLogin = (password: string) => {
    if (password === APP_PASSWORD) {
      setIsAuthenticated(true);
      setCurrentStep('mood');
    } else {
      alert('ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÎßûÏßÄ ÏïäÏäµÎãàÎã§.');
    }
  };

  const handleMoodSelect = (mood: 'good' | 'normal' | 'bad') => {
    setCurrentMood(mood);
    setCurrentStep('chat');
    setConversationCount(0);

    const initialMessage: ChatMessage = {
      role: 'assistant',
      content: `ÏïàÎÖïÌïòÏÑ∏Ïöî! üéµ Ïò§ÎäòÏùÄ ${getMoodText(mood)} Í∏∞Î∂ÑÏù¥ÏãúÍµ∞Ïöî. Ïò§Îäò ÌïòÎ£® Ïñ¥ÎñªÍ≤å Î≥¥ÎÇ¥ÏÖ®ÎäîÏßÄ Ìé∏ÌïòÍ≤å ÎßêÏîÄÌï¥Ï£ºÏÑ∏Ïöî. ‚ú®`,
      timestamp: new Date()
    };
    setChatMessages([initialMessage]);
  };

  const handleSendMessage = async () => {
    if (!currentInput.trim() || !currentMood) return;

    const userMessage: ChatMessage = {
      role: 'user',
      content: currentInput,
      timestamp: new Date()
    };

    setIsLoading(true);
    setChatMessages(prev => [...prev, userMessage]);
    setCurrentInput("");

    try {
      const aiResult = await getAIResponse(currentInput, chatMessages);
      
      const aiMessage: ChatMessage = {
        role: 'assistant',
        content: aiResult.response,
        timestamp: new Date(),
        musicRecommendation: aiResult.music,
        hasMusic: !!aiResult.music
      };
      
      setChatMessages(prev => [...prev, aiMessage]);
      
      // ÏùåÏïÖÏù¥ Ï∂îÏ≤úÎêòÏóàÏúºÎ©¥ Í∞úÏù∏ ÏùåÏïÖ Î¶¨Ïä§Ìä∏Ïóê Ï∂îÍ∞Ä
      if (aiResult.music) {
        addToPersonalMusic(aiResult.music);
      }
      
    } catch (error) {
      console.error('AI ÏùëÎãµ Ïò§Î•ò:', error);
      const errorMessage: ChatMessage = {
        role: 'assistant',
        content: 'Ï£ÑÏÜ°Ìï¥Ïöî. üíú ÏùºÏãúÏ†ÅÏúºÎ°ú Î¨∏Ï†úÍ∞Ä ÏÉùÍ≤ºÏñ¥Ïöî. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.',
        timestamp: new Date()
      };
      setChatMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  // ÏùåÏïÖ Ïû•Î•¥ ÏÑ†ÌÉù - API Ìò∏Ï∂ú ÏµúÏÜåÌôî
  const handleGenreSelect = async (genre: string) => {
    setSelectedGenre(genre);
    setCurrentStep('music');
    setIsLoading(true);
    
    try {
      const genreData = MUSIC_GENRES[genre as keyof typeof MUSIC_GENRES];
      const keywords = genreData?.searchKeywords || ['music official MV'];
      
      const musicResults: MusicItem[] = [];
      
      // Ìïú Î≤àÏóê ÌïòÎÇòÏî©Îßå Í≤ÄÏÉâÌïòÍ≥† ÏµúÎåÄ 3Í∞úÍπåÏßÄ
      for (let i = 0; i < Math.min(3, keywords.length); i++) {
        const keyword = keywords[i];
        const music = await searchYouTubeMusic(keyword);
        
        if (music && !musicResults.find(m => m.id === music.id)) {
          musicResults.push(music);
        }
        
        // API Ìò∏Ï∂ú Í∞ÑÍ≤©ÏùÑ ÎäòÎ¶º
        if (i < keywords.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      }
      
      setRecommendedMusic(musicResults);
    } catch (error) {
      console.error('ÏùåÏïÖ Í≤ÄÏÉâ Ïò§Î•ò:', error);
      setRecommendedMusic([]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleMusicSelect = (music: MusicItem) => {
    setSelectedMusic(music);
    addToPersonalMusic(music);
    alert(`"${music.title}" ÏùåÏïÖÏù¥ ÎÇ¥ ÏùåÏïÖ Î¶¨Ïä§Ìä∏Ïóê Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§! Í∞êÏ†ï ÏöîÏïΩ Îã®Í≥ÑÏóêÏÑú ÌôïÏù∏ÌïòÍ±∞ÎÇò ÎÇòÏ§ëÏóê 'ÎÇ¥ ÏùåÏïÖ'ÏóêÏÑú ÌôïÏù∏Ìï† Ïàò ÏûàÏñ¥Ïöî.`);
  };

  const handleGenerateSummary = async () => {
    if (!currentMood || chatMessages.length === 0) return;

    setIsLoading(true);
    try {
      const summary = await generateConversationSummary(chatMessages);
      setSummaryData(summary);
      setSelectedEmotions([]);
      setCustomEmotion('');
      setCurrentStep('summary');
    } catch (error) {
      console.error('ÏöîÏïΩ ÏÉùÏÑ± Ïò§Î•ò:', error);
      alert('ÏöîÏïΩ ÏÉùÏÑ± Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleSaveDiary = async () => {
    if (!currentMood || !summaryData) return;

    setIsLoading(true);

    try {
      const now = new Date();
      const finalEmotions = customEmotion.trim() ? [...selectedEmotions, customEmotion.trim()] : selectedEmotions;
      
      // ÎåÄÌôî Ï§ë Ï∂îÏ≤úÎêú ÏùåÏïÖÎì§ ÏàòÏßë
      const chatMusic = chatMessages
        .filter(msg => msg.musicRecommendation)
        .map(msg => msg.musicRecommendation!)
        .filter(music => music);
      
      const newEntry: DiaryEntry = {
        id: generateId(),
        date: formatDate(now),
        time: formatTime(now),
        mood: currentMood,
        summary: summaryData.summary,
        keywords: summaryData.keywords,
        selectedEmotions: finalEmotions,
        customEmotion: customEmotion.trim() || undefined,
        musicPlayed: selectedMusic ? [selectedMusic, ...chatMusic] : chatMusic,
        chatMessages: chatMessages,
        experienceGained: LEVEL_SYSTEM.experienceGain.diaryWrite,
        actionItems: summaryData.actionItems || [],
        aiGenreSuggestion: summaryData.aiGenreSuggestion,
        aiRecommendedMusic: summaryData.aiRecommendedMusic
      };

      setDiaryEntries(prev => [...prev, newEntry]);
      updateExperience(LEVEL_SYSTEM.experienceGain.diaryWrite);

      // ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
      setChatMessages([]);
      setCurrentMood(null);
      setSelectedGenre(null);
      setSelectedMusic(null);
      setRecommendedMusic([]);
      setSummaryData(null);
      setSelectedEmotions([]);
      setCustomEmotion('');
      setConversationCount(0);
      setCurrentStep('mood');

      alert('ÏùºÍ∏∞Í∞Ä Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§! +20 EXP');
    } catch (error) {
      console.error('ÏùºÍ∏∞ Ï†ÄÏû• Ïò§Î•ò:', error);
      alert('ÏùºÍ∏∞ Ï†ÄÏû• Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setIsLoading(false);
    }
  };

  // Í∞êÏ†ï ÏÑ†ÌÉù Ìï®Ïàò
  const handleEmotionSelect = (emotion: string) => {
    setSelectedEmotions(prev => {
      if (prev.includes(emotion)) {
        // Ïù¥ÎØ∏ ÏÑ†ÌÉùÎêú Í∞êÏ†ïÏù¥Î©¥ Ï†úÍ±∞
        return prev.filter(e => e !== emotion);
      } else if (prev.length < 2) {
        // 2Í∞ú ÎØ∏ÎßåÏù¥Î©¥ Ï∂îÍ∞Ä
        return [...prev, emotion];
      } else {
        // 2Í∞úÍ∞Ä Ïù¥ÎØ∏ ÏÑ†ÌÉùÎêòÏóàÏúºÎ©¥ Ï≤´ Î≤àÏß∏Î•º Ï†úÍ±∞ÌïòÍ≥† ÏÉàÎ°úÏö¥ Í≤É Ï∂îÍ∞Ä
        return [prev[1], emotion];
      }
    });
  };

  // Ïª¥Ìè¨ÎÑåÌä∏ Î†åÎçîÎßÅ Ìï®ÏàòÎì§
  const getCurrentTheme = () => THEMES[appSettings.theme];

  const renderTokenBar = () => {
    const usageRatio = Math.min(tokenUsage / MAX_FREE_TOKENS, 1.0);
    const remaining = Math.max(0, MAX_FREE_TOKENS - tokenUsage);

    let color = '#9c27b0';
    let status = 'Ï∂©Î∂ÑÌï¥Ïöî';

    if (usageRatio >= 0.95) {
      color = '#f44336';
      status = 'Ï°∞Í∏à Î∂ÄÏ°±Ìï¥Ïöî';
    } else if (usageRatio >= 0.5) {
      color = '#ff9800';
      status = 'Ï†ÅÎãπÌï¥Ïöî';
    }

    return (
      <div className={`bg-gradient-to-r ${getCurrentTheme().secondary} rounded-lg p-4 mb-4 border border-${getCurrentTheme().accent.split('-')[0]}-200`}>
        <div className="flex justify-between items-center mb-2">
          <span className={`text-sm font-semibold text-${getCurrentTheme().accent.split('-')[0]}-800`}>AIÏôÄ ÎåÄÌôîÌï† Ïàò ÏûàÎäî ÏóêÎÑàÏßÄ</span>
          <span className={`text-xs text-${getCurrentTheme().accent.split('-')[0]}-600`}>{remaining.toLocaleString()} / {MAX_FREE_TOKENS.toLocaleString()} ÎÇ®Ïùå</span>
        </div>
        <div className={`w-full bg-${getCurrentTheme().accent.split('-')[0]}-100 rounded-full h-2`}>
          <div
            className={`h-2 rounded-full transition-all bg-gradient-to-r ${getCurrentTheme().primary}`}
            style={{
              width: `${usageRatio * 100}%`
            }}
          ></div>
        </div>
        <div className={`text-center text-xs mt-1 text-${getCurrentTheme().accent.split('-')[0]}-600`}>
          ÏÉÅÌÉú: {status}
        </div>
      </div>
    );
  };

  const renderUserProgress = () => (
    <div className={`bg-gradient-to-r ${getCurrentTheme().secondary} rounded-xl shadow-lg p-6 mb-6 border border-${getCurrentTheme().accent.split('-')[0]}-200`}>
      <div className="flex justify-between items-center mb-4">
        <span className={`text-lg font-bold text-${getCurrentTheme().accent.split('-')[0]}-800`}>Î†àÎ≤® {userProgress.level}</span>
        <span className={`text-sm text-${getCurrentTheme().accent.split('-')[0]}-600`}>Îã§Ïùå Î†àÎ≤®ÍπåÏßÄ {userProgress.expToNext} EXP</span>
      </div>
      <div className={`w-full bg-${getCurrentTheme().accent.split('-')[0]}-100 rounded-full h-3`}>
        <div
          className={`bg-gradient-to-r ${getCurrentTheme().primary} h-3 rounded-full transition-all`}
          style={{ width: `${userProgress.progressPercentage}%` }}
        ></div>
      </div>
      <div className={`text-center text-xs text-${getCurrentTheme().accent.split('-')[0]}-600 mt-2`}>
        Ï¥ù Í≤ΩÌóòÏπò: {userProgress.experience} EXP
      </div>
    </div>
  );

  const renderLogin = () => (
    <div className={`min-h-screen bg-gradient-to-br ${getCurrentTheme().bgClass} flex items-center justify-center`}>
      <div className="bg-white rounded-2xl shadow-xl p-8 w-96">
        <div className="text-center mb-6">
          <div className="text-4xl mb-2">üéµ</div>
          <h1 className={`text-2xl font-bold text-${getCurrentTheme().accent.split('-')[0]}-800`}>Ïù¥ÌîåÎ¶¨</h1>
          <p className={`text-${getCurrentTheme().accent.split('-')[0]}-600`}>Í∞êÏ†ïÍ∏∞Î∞ò ÏùåÏïÖ Ï∂îÏ≤ú</p>
        </div>

        <div className="space-y-4">
          <input
            type="password"
            placeholder="ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
            className={`w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-${getCurrentTheme().accent}`}
            onKeyPress={(e) => {
              if (e.key === 'Enter') {
                handleLogin((e.target as HTMLInputElement).value);
              }
            }}
          />
          <button
            onClick={() => {
              const input = document.querySelector('input') as HTMLInputElement;
              handleLogin(input.value);
            }}
            className={`w-full bg-gradient-to-r ${getCurrentTheme().primary} text-white py-3 rounded-lg font-semibold hover:opacity-90 transition-all`}
          >
            ÏùåÏïÖÍ≥º Ìï®Íªò ÏãúÏûëÌïòÍ∏∞
          </button>
        </div>
      </div>
    </div>
  );

  const renderMoodSelection = () => (
    <div className={`min-h-screen bg-gradient-to-br ${getCurrentTheme().bgClass} p-4`}>
      <div className="max-w-4xl mx-auto">
        {renderUserProgress()}
        {renderTokenBar()}

        <div className="text-center mb-8">
          <h2 className="text-3xl font-bold text-gray-800 mb-2">Ïò§Îäò Í∏∞Î∂ÑÏùÄ Ïñ¥Îñ†ÏÑ∏Ïöî?</h2>
          <p className="text-gray-600">{appSettings.aiName}Í∞Ä Ïó¨Îü¨Î∂ÑÏùò Í∞êÏ†ïÏóê ÎßûÎäî ÏùåÏïÖÏùÑ Ï∞æÏïÑÎìúÎ¶¥Í≤åÏöî</p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-8">
          <div className="flex flex-col items-center">
            <button
              onClick={() => handleMoodSelect('good')}
              className="mb-4 transform hover:scale-110 transition-all duration-300 hover:drop-shadow-lg"
            >
              <svg width="120" height="120" viewBox="0 0 120 120" className="drop-shadow-md">
                <rect x="10" y="10" width="100" height="100" rx="25" ry="25" fill="#FF9500" />
                <circle cx="45" cy="55" r="4" fill="#000" />
                <circle cx="75" cy="55" r="4" fill="#000" />
                <path d="M 45 75 Q 60 90 75 75" stroke="#000" strokeWidth="4" fill="none" strokeLinecap="round" />
              </svg>
            </button>
            <span className="text-lg font-semibold text-gray-700">Ï¢ãÏïÑ!</span>
          </div>

          <div className="flex flex-col items-center">
            <button
              onClick={() => handleMoodSelect('normal')}
              className="mb-4 transform hover:scale-110 transition-all duration-300 hover:drop-shadow-lg"
            >
              <svg width="120" height="120" viewBox="0 0 120 120" className="drop-shadow-md">
                <circle cx="60" cy="60" r="50" fill="#81D4FA" />
                <circle cx="45" cy="50" r="4" fill="#000" />
                <circle cx="75" cy="50" r="4" fill="#000" />
                <line x1="45" y1="75" x2="75" y2="75" stroke="#000" strokeWidth="4" strokeLinecap="round" />
              </svg>
            </button>
            <span className="text-lg font-semibold text-gray-700">Í∑∏ÎÉ• Î≠ê..</span>
          </div>

          <div className="flex flex-col items-center">
            <button
              onClick={() => handleMoodSelect('bad')}
              className="mb-4 transform hover:scale-110 transition-all duration-300 hover:drop-shadow-lg"
            >
              <svg width="120" height="120" viewBox="0 0 120 120" className="drop-shadow-md">
                <ellipse cx="60" cy="60" rx="50" ry="45" fill="#B39DDB" />
                <circle cx="48" cy="52" r="4" fill="#000" />
                <circle cx="72" cy="52" r="4" fill="#000" />
                <path d="M 48 80 Q 60 65 72 80" stroke="#000" strokeWidth="4" fill="none" strokeLinecap="round" />
              </svg>
            </button>
            <span className="text-lg font-semibold text-gray-700">Î≥ÑÎ£®Ïïº..</span>
          </div>
        </div>

        {/* Î©îÎâ¥ ÏïÑÏù¥ÏΩò Î≤ÑÌäºÎì§ - ÏàúÏÑú ÏàòÏ†ï */}
        <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-4 mb-8">
          <button
            onClick={() => setCurrentStep('myDiary')}
            className="bg-white rounded-lg shadow-md p-4 flex flex-col items-center hover:shadow-lg transition-shadow"
          >
            <span className="text-2xl mb-2">üìñ</span>
            <span className="text-sm font-medium text-gray-700">ÎÇ¥ ÏùºÍ∏∞Ïû•</span>
            <span className="text-xs text-gray-500">({diaryEntries.length})</span>
          </button>

          <button
            onClick={() => setCurrentStep('myMusic')}
            className="bg-white rounded-lg shadow-md p-4 flex flex-col items-center hover:shadow-lg transition-shadow"
          >
            <span className="text-2xl mb-2">üéµ</span>
            <span className="text-sm font-medium text-gray-700">ÎÇ¥ ÏùåÏïÖ</span>
            <span className="text-xs text-gray-500">({personalMusic.length})</span>
          </button>

          <button
            onClick={() => setCurrentStep('genre')}
            className="bg-white rounded-lg shadow-md p-4 flex flex-col items-center hover:shadow-lg transition-shadow"
          >
            <span className="text-2xl mb-2">üéº</span>
            <span className="text-sm font-medium text-gray-700">ÏùåÏïÖ Ïû•Î•¥</span>
            <span className="text-xs text-gray-500">Î∞îÎ°ú Îì£Í∏∞</span>
          </button>

          <button
            onClick={() => setCurrentStep('search')}
            className="bg-white rounded-lg shadow-md p-4 flex flex-col items-center hover:shadow-lg transition-shadow"
          >
            <span className="text-2xl mb-2">üîç</span>
            <span className="text-sm font-medium text-gray-700">Í≤ÄÏÉâ</span>
            <span className="text-xs text-gray-500">Í∏∞Î°ù Ï∞æÍ∏∞</span>
          </button>

          <button
            onClick={() => setCurrentStep('stats')}
            className="bg-white rounded-lg shadow-md p-4 flex flex-col items-center hover:shadow-lg transition-shadow"
          >
            <span className="text-2xl mb-2">üìä</span>
            <span className="text-sm font-medium text-gray-700">Í∞êÏ†ïÎã¨Î†•</span>
            <span className="text-xs text-gray-500">ÌÜµÍ≥Ñ</span>
          </button>

          <button
            onClick={() => setCurrentStep('trash')}
            className="bg-white rounded-lg shadow-md p-4 flex flex-col items-center hover:shadow-lg transition-shadow"
          >
            <span className="text-2xl mb-2">üóëÔ∏è</span>
            <span className="text-sm font-medium text-gray-700">Ìú¥ÏßÄÌÜµ</span>
            <span className="text-xs text-gray-500">({trashEntries.length})</span>
          </button>

          <button
            onClick={() => setCurrentStep('settings')}
            className="bg-white rounded-lg shadow-md p-4 flex flex-col items-center hover:shadow-lg transition-shadow"
          >
            <span className="text-2xl mb-2">‚öôÔ∏è</span>
            <span className="text-sm font-medium text-gray-700">ÏÑ§Ï†ï</span>
            <span className="text-xs text-gray-500">ÏòµÏÖò</span>
          </button>
        </div>

        {/* ÏµúÍ∑º Í∞êÏ†ï Í∏∞Î°ù */}
        {diaryEntries.length > 0 && (
          <div className="bg-white rounded-lg shadow-md p-6">
            <h3 className="text-xl font-bold mb-4">ÏµúÍ∑º Í∞êÏ†ï Í∏∞Î°ù</h3>
            <div className="space-y-4">
              {diaryEntries.slice(-5).reverse().map((entry) => (
                <div key={entry.id} className={`flex items-center justify-between p-3 bg-gradient-to-r ${getCurrentTheme().secondary} rounded-lg border border-${getCurrentTheme().accent.split('-')[0]}-100`}>
                  <div className="flex items-center space-x-3 flex-1">
                    <span className="text-2xl">{getMoodEmoji(entry.mood)}</span>
                    <div className="flex-1">
                      <p className={`font-medium text-${getCurrentTheme().accent.split('-')[0]}-800`}>{entry.date} {entry.time}</p>
                      <p className={`text-sm text-${getCurrentTheme().accent.split('-')[0]}-600`}>
                        {expandedDiaryId === entry.id ? entry.summary : `${entry.summary.substring(0, 50)}...`}
                      </p>
                      {entry.selectedEmotions && entry.selectedEmotions.length > 0 && (
                        <p className={`text-xs text-${getCurrentTheme().accent.split('-')[0]}-500 mt-1`}>
                          Í∞êÏ†ï: {entry.selectedEmotions.slice(0, 3).join(', ')}
                        </p>
                      )}
                      {entry.musicPlayed && entry.musicPlayed.length > 0 && (
                        <p className="text-xs text-pink-500 mt-1">
                          üéµ {entry.musicPlayed[0].title}
                        </p>
                      )}
                    </div>
                  </div>
                  <div className="flex space-x-2">
                    <button
                      onClick={() => setExpandedDiaryId(expandedDiaryId === entry.id ? null : entry.id)}
                      className="text-blue-500 hover:text-blue-700 p-1 rounded text-sm"
                      title="Ï†ÑÏ≤¥ Î≥¥Í∏∞"
                    >
                      {expandedDiaryId === entry.id ? 'Ï†ëÍ∏∞' : 'ÌéºÏπòÍ∏∞'}
                    </button>
                    <button
                      onClick={() => moveToTrash(entry)}
                      className="text-red-500 hover:text-red-700 p-1 rounded"
                      title="Ìú¥ÏßÄÌÜµÏúºÎ°ú Ïù¥Îèô"
                    >
                      üóëÔ∏è
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );

  const renderChat = () => (
    <div className={`min-h-screen bg-gradient-to-br ${getCurrentTheme().bgClass} p-4`}>
      <div className="max-w-4xl mx-auto">
        {renderUserProgress()}
        {renderTokenBar()}

        <div className={`bg-gradient-to-r ${getCurrentTheme().secondary} rounded-lg shadow-lg p-6 mb-6 border border-${getCurrentTheme().accent.split('-')[0]}-200`}>
          <div className="flex items-center justify-between mb-4">
            <h2 className={`text-xl font-bold text-${getCurrentTheme().accent.split('-')[0]}-800`}>{appSettings.aiName}ÏôÄ ÎåÄÌôîÌïòÍ∏∞</h2>
            <div className="flex items-center space-x-2">
              <span className={`text-sm text-${getCurrentTheme().accent.split('-')[0]}-600`}>ÌòÑÏû¨ Í∏∞Î∂Ñ:</span>
              <span className={`px-3 py-1 bg-${getCurrentTheme().accent.split('-')[0]}-100 text-${getCurrentTheme().accent.split('-')[0]}-800 rounded-full text-sm`}>
                {getMoodEmoji(currentMood || 'normal')} {getMoodText(currentMood || 'normal')}
              </span>
            </div>
          </div>

          <div className={`h-96 overflow-y-auto mb-4 p-4 bg-gradient-to-br from-white to-${getCurrentTheme().accent.split('-')[0]}-50 rounded-lg border border-${getCurrentTheme().accent.split('-')[0]}-100`}>
            {chatMessages.map((message, index) => (
              <div key={index} className={`mb-4 ${message.role === 'user' ? 'text-right' : 'text-left'}`}>
                <div className={`inline-block p-3 rounded-lg max-w-xs ${
                  message.role === 'user' 
                    ? `bg-gradient-to-r ${getCurrentTheme().primary} text-white`
                    : `bg-white text-${getCurrentTheme().accent.split('-')[0]}-800 border border-${getCurrentTheme().accent.split('-')[0]}-200`
                }`}>
                  {message.role === 'assistant' && (
                    <div className={`font-semibold mb-1 text-${getCurrentTheme().accent.split('-')[0]}-600`}>{appSettings.aiName}:</div>
                  )}
                  {message.content}
                  
                  {/* ÏùåÏïÖ Ï∂îÏ≤úÏù¥ ÏûàÎäî Í≤ΩÏö∞ */}
                  {message.musicRecommendation && (
                    <div className="mt-3 p-3 bg-gray-50 rounded-lg border">
                      <div className="text-sm font-semibold text-gray-700 mb-2">üéµ Ï∂îÏ≤ú ÏùåÏïÖ</div>
                      <div className="flex items-center space-x-2 mb-2">
                        <img 
                          src={message.musicRecommendation.thumbnail} 
                          alt={message.musicRecommendation.title}
                          className="w-12 h-12 object-cover rounded"
                        />
                        <div className="flex-1">
                          <p className="text-sm font-medium text-gray-800">{message.musicRecommendation.title}</p>
                          <p className="text-xs text-gray-600">{message.musicRecommendation.artist}</p>
                        </div>
                      </div>
                      <div className="flex space-x-2">
                        <a
                          href={message.musicRecommendation.url}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="flex-1 py-1 px-2 bg-red-500 text-white rounded text-center text-xs hover:bg-red-600"
                        >
                          Ïú†ÌäúÎ∏åÏóêÏÑú Îì£Í∏∞
                        </a>
                        <button
                          onClick={() => handleMusicSelect(message.musicRecommendation!)}
                          className="flex-1 py-1 px-2 bg-blue-500 text-white rounded text-xs hover:bg-blue-600"
                        >
                          ÎÇ¥ Î¶¨Ïä§Ìä∏ Ï∂îÍ∞Ä
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            ))}
            {isLoading && (
              <div className="text-left">
                <div className={`inline-block p-3 rounded-lg bg-white text-${getCurrentTheme().accent.split('-')[0]}-800 border border-${getCurrentTheme().accent.split('-')[0]}-200`}>
                  <div className={`font-semibold mb-1 text-${getCurrentTheme().accent.split('-')[0]}-600`}>{appSettings.aiName}:</div>
                  ÎãµÎ≥ÄÏùÑ Ï§ÄÎπÑÌïòÍ≥† ÏûàÏñ¥Ïöî... üíú
                </div>
              </div>
            )}
          </div>

          <div className="flex space-x-2">
            <input
              type="text"
              value={currentInput}
              onChange={(e) => setCurrentInput(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
              placeholder="Ïò§Îäò ÌïòÎ£® Ïñ¥Îñ†ÏÖ®ÎÇòÏöî?"
              className={`flex-1 px-4 py-2 border border-${getCurrentTheme().accent.split('-')[0]}-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-${getCurrentTheme().accent} bg-white`}
              disabled={isLoading}
            />
            <button
              onClick={handleSendMessage}
              disabled={isLoading}
              className={`px-6 py-2 bg-gradient-to-r ${getCurrentTheme().primary} text-white rounded-lg hover:opacity-90 disabled:opacity-50`}
            >
              Ï†ÑÏÜ°
            </button>
          </div>
        </div>

        <div className="flex space-x-4">
          <button
            onClick={() => setCurrentStep('genre')}
            className={`flex-1 py-3 bg-gradient-to-r ${getCurrentTheme().primary} text-white rounded-lg font-semibold hover:opacity-90`}
          >
            üéµ ÏùåÏïÖ Ïû•Î•¥Î≥ÑÎ°ú Î∞îÎ°ú Îì£Í∏∞
          </button>
          <button
            onClick={handleGenerateSummary}
            className="flex-1 py-3 bg-gradient-to-r from-blue-500 to-cyan-500 text-white rounded-lg font-semibold hover:opacity-90"
            disabled={chatMessages.length === 0}
          >
            üìù Í∞êÏ†ï ÏöîÏïΩÌïòÍ∏∞
          </button>
        </div>

        <div className="flex space-x-4 mt-4">
          <button
            onClick={() => setCurrentStep('mood')}
            className="px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600"
          >
            üè† ÌôàÏúºÎ°ú
          </button>
        </div>
      </div>
    </div>
  );

  const renderGenreSelection = () => (
    <div className={`min-h-screen bg-gradient-to-br ${getCurrentTheme().bgClass} p-4`}>
      <div className="max-w-4xl mx-auto">
        {renderUserProgress()}
        
        <div className="text-center mb-8">
          <h2 className="text-3xl font-bold text-gray-800 mb-2">ÏùåÏïÖ Ïû•Î•¥ ÏÑ†ÌÉù</h2>
          <p className="text-gray-600">{getMoodEmoji(currentMood || 'normal')} {getMoodText(currentMood || 'normal')} Í∏∞Î∂ÑÏóê Ïñ¥Îñ§ ÏùåÏïÖÏùÑ Îì§Ïñ¥Î≥¥ÏãúÍ≤†Ïñ¥Ïöî?</p>
        </div>

        <div className="grid grid-cols-2 md:grid-cols-2 gap-6 mb-8">
          {Object.entries(MUSIC_GENRES).map(([key, genre]) => (
            <button
              key={key}
              onClick={() => handleGenreSelect(key)}
              className="bg-white rounded-lg shadow-lg p-6 hover:shadow-xl transition-shadow transform hover:-translate-y-1"
            >
              <div className="text-4xl mb-3">{genre.icon}</div>
              <h3 className="text-lg font-bold mb-2">{genre.name}</h3>
              <p className="text-sm text-gray-600">{genre.desc}</p>
            </button>
          ))}
        </div>

        <div className="flex space-x-4 justify-center">
          <button
            onClick={() => setCurrentStep('mood')}
            className={`px-6 py-3 bg-gradient-to-r ${getCurrentTheme().primary} text-white rounded-lg hover:opacity-90`}
          >
            üè† ÌôàÏúºÎ°ú
          </button>
        </div>
      </div>
    </div>
  );

  const renderMusicPlayer = () => (
    <div className={`min-h-screen bg-gradient-to-br ${getCurrentTheme().bgClass} p-4`}>
      <div className="max-w-4xl mx-auto">
        {renderUserProgress()}
        
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <h2 className="text-2xl font-bold mb-4">üéµ ÏùåÏïÖ Ï∂îÏ≤ú</h2>
          
          {isLoading ? (
            <div className="text-center">
              <div className={`animate-spin rounded-full h-32 w-32 border-b-2 border-${getCurrentTheme().accent} mx-auto mb-4`}></div>
              <p className="text-gray-600">ÏùåÏïÖÏùÑ Ï∞æÍ≥† ÏûàÏñ¥Ïöî...</p>
            </div>
          ) : recommendedMusic.length > 0 ? (
            <div>
              {/* Î©îÏù∏ Ï∂îÏ≤úÍ≥° */}
              {recommendedMusic[0] && (
                <div className="mb-8 text-center border-b pb-6">
                  <h3 className="text-xl font-bold mb-4 text-blue-600">Î©îÏù∏ Ï∂îÏ≤úÍ≥°</h3>
                  <div className="mb-6">
                    <img 
                      src={recommendedMusic[0].thumbnail} 
                      alt={recommendedMusic[0].title}
                      className="w-64 h-48 object-cover rounded-lg mx-auto mb-4"
                    />
                    <h4 className="text-xl font-bold mb-2">{recommendedMusic[0].title}</h4>
                    <p className="text-gray-600 mb-4">{recommendedMusic[0].artist}</p>
                    
                    <div className="mb-6">
                      <iframe
                        width="100%"
                        height="315"
                        src={`https://www.youtube.com/embed/${recommendedMusic[0].id}?autoplay=0`}
                        title="YouTube video player"
                        frameBorder="0"
                        allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                        allowFullScreen
                        className="rounded-lg"
                      ></iframe>
                    </div>

                    <button
                      onClick={() => handleMusicSelect(recommendedMusic[0])}
                      className={`w-full py-3 bg-gradient-to-r ${getCurrentTheme().primary} text-white rounded-lg font-semibold hover:opacity-90 mb-4`}
                    >
                      Ïù¥ ÏùåÏïÖÏùÑ ÎÇ¥ Î¶¨Ïä§Ìä∏Ïóê Ï∂îÍ∞ÄÌïòÍ∏∞
                    </button>
                  </div>
                </div>
              )}

              {/* Ï∂îÍ∞Ä ÏùåÏïÖ Î™©Î°ù */}
              {recommendedMusic.length > 1 && (
                <div>
                  <h3 className="text-xl font-bold mb-4 text-green-600">Ï∂îÍ∞Ä Ï∂îÏ≤ú ÏùåÏïÖ</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {recommendedMusic.slice(1).map((music) => (
                      <div key={music.id} className="bg-gray-50 rounded-lg p-4">
                        <img 
                          src={music.thumbnail} 
                          alt={music.title}
                          className="w-full h-32 object-cover rounded mb-3"
                        />
                        <h4 className="font-bold text-sm mb-1">{music.title}</h4>
                        <p className="text-gray-600 text-xs mb-3">{music.artist}</p>
                        <div className="flex space-x-2">
                          <a
                            href={music.url}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="flex-1 py-2 bg-red-500 text-white rounded text-center text-sm hover:bg-red-600"
                          >
                            Ïú†ÌäúÎ∏åÏóêÏÑú Îì£Í∏∞
                          </a>
                          <button
                            onClick={() => handleMusicSelect(music)}
                            className="flex-1 py-2 bg-blue-500 text-white rounded text-sm hover:bg-blue-600"
                          >
                            Î¶¨Ïä§Ìä∏ Ï∂îÍ∞Ä
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          ) : (
            <div className="text-center">
              <p className="text-gray-600 mb-4">Ï£ÑÏÜ°Ìï¥Ïöî. ÌòÑÏû¨ ÏùåÏïÖÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.</p>
              <p className="text-gray-500 text-sm mb-4">YouTube API Ï†úÌïúÏù¥ÎÇò ÎÑ§Ìä∏ÏõåÌÅ¨ Î¨∏Ï†úÏùº Ïàò ÏûàÏñ¥Ïöî.</p>
              <button
                onClick={() => handleGenreSelect(selectedGenre || 'kpop')}
                className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
              >
                Îã§Ïãú ÏãúÎèÑÌïòÍ∏∞
              </button>
            </div>
          )}

          <div className="flex space-x-4 justify-center mt-6">
            <button
              onClick={() => setCurrentStep('genre')}
              className="px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600"
            >
              ‚Üê Ïù¥Ï†ÑÏúºÎ°ú
            </button>
            <button
              onClick={() => setCurrentStep('mood')}
              className={`px-6 py-3 bg-gradient-to-r ${getCurrentTheme().primary} text-white rounded-lg hover:opacity-90`}
            >
              üè† ÌôàÏúºÎ°ú
            </button>
          </div>
        </div>
      </div>
    </div>
  );

  const renderSummary = () => (
    <div className={`min-h-screen bg-gradient-to-br ${getCurrentTheme().bgClass} p-4`}>
      <div className="max-w-4xl mx-auto">
        {renderUserProgress()}

        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <h2 className="text-2xl font-bold mb-4">üìù Í∞êÏ†ï ÏöîÏïΩ</h2>

          {summaryData && (
            <>
              <div className={`bg-gradient-to-r ${getCurrentTheme().secondary} rounded-lg p-4 mb-6 border border-${getCurrentTheme().accent.split('-')[0]}-200`}>
                <h3 className={`text-lg font-bold mb-2 text-${getCurrentTheme().accent.split('-')[0]}-800`}>Ïò§ÎäòÏùò ÏöîÏïΩ</h3>
                <p className={`text-${getCurrentTheme().accent.split('-')[0]}-700`}>{summaryData.summary}</p>
              </div>

              <div className="mb-6">
                <h3 className="text-lg font-bold mb-3">AI Ï∂îÏ≤ú Í∞êÏ†ï (ÏµúÎåÄ 2Í∞ú ÏÑ†ÌÉù)</h3>
                <div className="flex flex-wrap gap-2 mb-4">
                  {summaryData.recommendedEmotions.map((emotion: string, index: number) => (
                    <button
                      key={index}
                      onClick={() => handleEmotionSelect(emotion)}
                      className={`px-3 py-2 rounded-full text-sm font-medium transition-all ${
                        selectedEmotions.includes(emotion)
                          ? 'bg-white text-purple-800 shadow-lg border-2 border-purple-500'
                          : `bg-gray-200 text-gray-700 hover:bg-${getCurrentTheme().accent.split('-')[0]}-100 hover:text-${getCurrentTheme().accent.split('-')[0]}-800`
                      }`}
                    >
                      {emotion}
                    </button>
                  ))}
                </div>

                <h3 className="text-lg font-bold mb-3">ÏßÅÏ†ë Í∞êÏ†ï ÏûÖÎ†•</h3>
                <input
                  type="text"
                  value={customEmotion}
                  onChange={(e) => setCustomEmotion(e.target.value)}
                  placeholder="ÎÇòÎßåÏùò Í∞êÏ†ïÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî"
                  className={`w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-${getCurrentTheme().accent} mb-4`}
                />

                <div className="text-sm text-gray-600 mb-4">
                  ÏÑ†ÌÉùÎêú Í∞êÏ†ï: {selectedEmotions.join(', ')} {customEmotion && `+ ${customEmotion}`}
                </div>
              </div>

              {summaryData.actionItems && summaryData.actionItems.length > 0 && (
                <div className="bg-gradient-to-r from-green-50 to-blue-50 rounded-lg p-4 mb-6 border border-green-200">
                  <h3 className="text-lg font-bold mb-2 text-green-800">Ïò§ÎäòÏùò Ïï°ÏÖò ÏïÑÏù¥ÌÖú</h3>
                  <ul className="space-y-2">
                    {summaryData.actionItems.map((item: string, index: number) => (
                      <li key={index} className="text-green-700 flex items-start">
                        <span className="text-green-500 mr-2">‚úì</span>
                        {item}
                      </li>
                    ))}
                  </ul>
                </div>
              )}

              <div className="flex space-x-4">
                <button
                  onClick={() => setCurrentStep('chat')}
                  className="flex-1 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600"
                >
                  ‚Üê Ïù¥Ï†ÑÏúºÎ°ú
                </button>
                <button
                  onClick={handleSaveDiary}
                  className="flex-1 py-3 bg-gradient-to-r from-green-500 to-blue-500 text-white rounded-lg font-semibold hover:opacity-90"
                >
                  üíæ ÏùºÍ∏∞Î°ú Ï†ÄÏû•ÌïòÍ∏∞
                </button>
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );

  const renderMyDiary = () => (
    <div className={`min-h-screen bg-gradient-to-br ${getCurrentTheme().bgClass} p-4`}>
      <div className="max-w-4xl mx-auto">
        {renderUserProgress()}
        
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold">üìñ ÎÇ¥ ÏùºÍ∏∞Ïû•</h2>
            <div className="flex space-x-2">
              <button
                onClick={() => setCurrentStep('mood')}
                className="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600"
              >
                üè† ÌôàÏúºÎ°ú
              </button>
            </div>
          </div>

          {diaryEntries.length === 0 ? (
            <div className="text-center py-12">
              <p className="text-gray-500 text-lg">ÏïÑÏßÅ Ï†ÄÏû•Îêú ÏùºÍ∏∞Í∞Ä ÏóÜÏäµÎãàÎã§</p>
              <p className="text-gray-400 text-sm mt-2">Ï≤´ Î≤àÏß∏ Í∞êÏ†ï ÏùºÍ∏∞Î•º ÏûëÏÑ±Ìï¥Î≥¥ÏÑ∏Ïöî!</p>
            </div>
          ) : (
            <div className="space-y-6">
              {diaryEntries.slice().reverse().map((entry) => (
                <div key={entry.id} className={`bg-gradient-to-r ${getCurrentTheme().secondary} rounded-lg p-6 border border-${getCurrentTheme().accent.split('-')[0]}-200`}>
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center space-x-3">
                      <span className="text-3xl">{getMoodEmoji(entry.mood)}</span>
                      <div>
                        <h3 className={`text-lg font-bold text-${getCurrentTheme().accent.split('-')[0]}-800`}>
                          {entry.date} {entry.time}
                        </h3>
                        <p className={`text-sm text-${getCurrentTheme().accent.split('-')[0]}-600`}>
                          Í∏∞Î∂Ñ: {getMoodText(entry.mood)}
                        </p>
                      </div>
                    </div>
                    <button
                      onClick={() => moveToTrash(entry)}
                      className="text-red-500 hover:text-red-700 p-2 rounded"
                      title="Ìú¥ÏßÄÌÜµÏúºÎ°ú Ïù¥Îèô"
                    >
                      üóëÔ∏è
                    </button>
                  </div>

                  <div className="mb-4">
                    <h4 className="font-semibold mb-2">Ïò§ÎäòÏùò ÏöîÏïΩ</h4>
                    <p className="text-gray-700">{entry.summary}</p>
                  </div>

                  {entry.selectedEmotions && entry.selectedEmotions.length > 0 && (
                    <div className="mb-4">
                      <h4 className="font-semibold mb-2">ÏÑ†ÌÉùÌïú Í∞êÏ†ï</h4>
                      <div className="flex flex-wrap gap-2">
                        {entry.selectedEmotions.map((emotion, index) => (
                          <span
                            key={index}
                            className={`px-3 py-1 bg-${getCurrentTheme().accent.split('-')[0]}-100 text-${getCurrentTheme().accent.split('-')[0]}-800 rounded-full text-sm`}
                          >
                            {emotion}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}

                  {entry.keywords && entry.keywords.length > 0 && (
                    <div className="mb-4">
                      <h4 className="font-semibold mb-2">ÌÇ§ÏõåÎìú</h4>
                      <div className="flex flex-wrap gap-2">
                        {entry.keywords.map((keyword, index) => (
                          <span
                            key={index}
                            className="px-2 py-1 bg-gray-200 text-gray-700 rounded text-sm"
                          >
                            {keyword}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}

                  {entry.actionItems && entry.actionItems.length > 0 && (
                    <div className="mb-4">
                      <h4 className="font-semibold mb-2">Ïï°ÏÖò ÏïÑÏù¥ÌÖú</h4>
                      <ul className="space-y-1">
                        {entry.actionItems.map((item, index) => (
                          <li key={index} className="text-green-700 flex items-start">
                            <span className="text-green-500 mr-2">‚úì</span>
                            {item}
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}

                  {entry.musicPlayed && entry.musicPlayed.length > 0 && (
                    <div className="mb-4">
                      <h4 className="font-semibold mb-2">ÏÑ†ÌÉùÌïú ÏùåÏïÖ</h4>
                      {entry.musicPlayed.map((music, index) => (
                        <div key={index} className="bg-white p-3 rounded-lg mb-2">
                          <div className="flex items-center space-x-3">
                            <img 
                              src={music.thumbnail} 
                              alt={music.title}
                              className="w-12 h-12 object-cover rounded"
                            />
                            <div className="flex-1">
                              <p className="font-medium">{music.title}</p>
                              <p className="text-sm text-gray-600">{music.artist}</p>
                            </div>
                            <a
                              href={music.url}
                              target="_blank"
                              rel="noopener noreferrer"
                              className="px-3 py-1 bg-red-500 text-white rounded text-sm hover:bg-red-600"
                            >
                              Îì£Í∏∞
                            </a>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );

  const renderMyMusic = () => (
    <div className={`min-h-screen bg-gradient-to-br ${getCurrentTheme().bgClass} p-4`}>
      <div className="max-w-4xl mx-auto">
        {renderUserProgress()}
        
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold">üéµ ÎÇ¥ ÏùåÏïÖ Î¶¨Ïä§Ìä∏</h2>
            <div className="flex space-x-2">
              <button
                onClick={() => setCurrentStep('mood')}
                className="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600"
              >
                üè† ÌôàÏúºÎ°ú
              </button>
            </div>
          </div>

          {personalMusic.length === 0 ? (
            <div className="text-center py-12">
              <p className="text-gray-500 text-lg">Ï†ÄÏû•Îêú ÏùåÏïÖÏù¥ ÏóÜÏäµÎãàÎã§</p>
              <p className="text-gray-400 text-sm mt-2">ÏùåÏïÖÏùÑ ÏÑ†ÌÉùÌï¥ÏÑú ÎÇòÎßåÏùò ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏Î•º ÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî!</p>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {personalMusic.map((music, index) => (
                <div key={music.id} className="bg-gray-50 rounded-lg p-4 hover:shadow-md transition-shadow">
                  <img 
                    src={music.thumbnail} 
                    alt={music.title}
                    className="w-full h-32 object-cover rounded mb-3"
                  />
                  <h3 className="font-bold text-sm mb-1">{music.title}</h3>
                  <p className="text-gray-600 text-xs mb-2">{music.artist}</p>
                  <p className="text-gray-500 text-xs mb-3">
                    Ïû•Î•¥: {MUSIC_GENRES[music.genre as keyof typeof MUSIC_GENRES]?.name || music.genre}
                  </p>
                  <p className="text-gray-500 text-xs mb-3">
                    Ïû¨ÏÉù ÌöüÏàò: {music.playCount || 1}Ìöå
                  </p>
                  <div className="flex space-x-2">
                    <a
                      href={music.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="flex-1 py-2 bg-red-500 text-white rounded text-center text-sm hover:bg-red-600"
                    >
                      Ïú†ÌäúÎ∏åÏóêÏÑú Îì£Í∏∞
                    </a>
                    <button
                      onClick={() => {
                        setPersonalMusic(prev => prev.filter(m => m.id !== music.id));
                        alert('ÏùåÏïÖÏù¥ Î¶¨Ïä§Ìä∏ÏóêÏÑú Ï†úÍ±∞ÎêòÏóàÏäµÎãàÎã§.');
                      }}
                      className="px-3 py-2 bg-gray-500 text-white rounded text-sm hover:bg-gray-600"
                      title="Î¶¨Ïä§Ìä∏ÏóêÏÑú Ï†úÍ±∞"
                    >
                      üóëÔ∏è
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );

  const renderTrash = () => (
    <div className={`min-h-screen bg-gradient-to-br ${getCurrentTheme().bgClass} p-4`}>
      <div className="max-w-4xl mx-auto">
        {renderUserProgress()}
        
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-2xl font-bold">üóëÔ∏è Ìú¥ÏßÄÌÜµ</h2>
            <div className="flex space-x-2">
              {trashEntries.length > 0 && (
                <button
                  onClick={() => {
                    if (window.confirm('Ìú¥ÏßÄÌÜµÏùÑ Î™®Îëê ÎπÑÏö∞ÏãúÍ≤†ÏäµÎãàÍπå?')) {
                      setTrashEntries([]);
                    }
                  }}
                  className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600"
                >
                  Ï†ÑÏ≤¥ ÎπÑÏö∞Í∏∞
                </button>
              )}
              <button
                onClick={() => setCurrentStep('mood')}
                className="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600"
              >
                üè† ÌôàÏúºÎ°ú
              </button>
            </div>
          </div>

          {trashEntries.length === 0 ? (
            <div className="text-center py-12">
              <p className="text-gray-500 text-lg">Ìú¥ÏßÄÌÜµÏù¥ ÎπÑÏñ¥ÏûàÏäµÎãàÎã§</p>
            </div>
          ) : (
            <div className="space-y-4">
              {trashEntries.map((entry) => (
                <div key={entry.id} className="bg-gray-50 rounded-lg p-4">
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center space-x-3">
                      <span className="text-2xl">{getMoodEmoji(entry.mood)}</span>
                      <div>
                        <p className="font-medium">{entry.date} {entry.time}</p>
                        <p className="text-sm text-gray-600">{entry.summary}</p>
                      </div>
                    </div>
                    <div className="flex space-x-2">
                      <button
                        onClick={() => restoreFromTrash(entry)}
                        className="px-3 py-1 bg-blue-500 text-white rounded text-sm hover:bg-blue-600"
                      >
                        Î≥µÏõê
                      </button>
                      <button
                        onClick={() => {
                          if (window.confirm('ÏòÅÍµ¨Ï†ÅÏúºÎ°ú ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
                            setTrashEntries(prev => prev.filter(e => e.id !== entry.id));
                          }
                        }}
                        className="px-3 py-1 bg-red-500 text-white rounded text-sm hover:bg-red-600"
                      >
                        ÏôÑÏ†Ñ ÏÇ≠Ï†ú
                      </button>
                    </div>
                  </div>
                  {entry.deletedAt && (
                    <p className="text-xs text-gray-500 mt-2">
                      ÏÇ≠Ï†úÏùº: {new Date(entry.deletedAt).toLocaleString('ko-KR')}
                    </p>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );

  const renderCalendar = () => {
    const monthNames = ['1Ïõî', '2Ïõî', '3Ïõî', '4Ïõî', '5Ïõî', '6Ïõî', '7Ïõî', '8Ïõî', '9Ïõî', '10Ïõî', '11Ïõî', '12Ïõî'];
    const dayNames = ['Ïùº', 'Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†'];

    const getCalendarData = (month: Date) => {
      const startOfMonth = new Date(month.getFullYear(), month.getMonth(), 1);
      const startDate = new Date(startOfMonth);
      startDate.setDate(startDate.getDate() - startDate.getDay());

      const calendarData = [];
      const currentDate = new Date(startDate);

      for (let week = 0; week < 6; week++) {
        const weekData = [];
        for (let day = 0; day < 7; day++) {
          const dayEntries = diaryEntries.filter(entry => {
            const entryDate = new Date(entry.date);
            return entryDate.toDateString() === currentDate.toDateString();
          });

          weekData.push({
            date: new Date(currentDate),
            entries: dayEntries,
            isCurrentMonth: currentDate.getMonth() === month.getMonth(),
            isToday: currentDate.toDateString() === new Date().toDateString()
          });

          currentDate.setDate(currentDate.getDate() + 1);
        }
        calendarData.push(weekData);
      }

      return calendarData;
    };

    const calendarData = getCalendarData(currentCalendarMonth);

    return (
      <div className={`min-h-screen bg-gradient-to-br ${getCurrentTheme().bgClass} p-4`}>
        <div className="max-w-4xl mx-auto">
          {renderUserProgress()}
          
          <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold">üìÖ Í∞êÏ†ï Îã¨Î†•</h2>
              <button
                onClick={() => setCurrentStep('mood')}
                className="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600"
              >
                üè† ÌôàÏúºÎ°ú
              </button>
            </div>

            <div className="flex items-center justify-between mb-6">
              <button
                onClick={() => {
                  const newMonth = new Date(currentCalendarMonth);
                  newMonth.setMonth(newMonth.getMonth() - 1);
                  setCurrentCalendarMonth(newMonth);
                }}
                className={`px-4 py-2 bg-gradient-to-r ${getCurrentTheme().primary} text-white rounded-lg hover:opacity-90`}
              >
                ‚Üê Ïù¥Ï†Ñ
              </button>
              <h3 className="text-xl font-bold">
                {currentCalendarMonth.getFullYear()}ÎÖÑ {monthNames[currentCalendarMonth.getMonth()]}
              </h3>
              <button
                onClick={() => {
                  const newMonth = new Date(currentCalendarMonth);
                  newMonth.setMonth(newMonth.getMonth() + 1);
                  setCurrentCalendarMonth(newMonth);
                }}
                className={`px-4 py-2 bg-gradient-to-r ${getCurrentTheme().primary} text-white rounded-lg hover:opacity-90`}
              >
                Îã§Ïùå ‚Üí
              </button>
            </div>

            <div className="grid grid-cols-7 gap-1 mb-2">
              {dayNames.map((day) => (
                <div key={day} className="p-2 text-center font-semibold text-gray-600">
                  {day}
                </div>
              ))}
            </div>

            <div className="grid grid-cols-7 gap-1">
              {calendarData.flat().map((day, index) => (
                <div
                  key={index}
                  className={`p-2 h-20 border rounded ${
                    day.isCurrentMonth ? 'bg-white' : 'bg-gray-100'
                  } ${day.isToday ? `ring-2 ring-${getCurrentTheme().accent}` : ''}`}
                >
                  <div className="text-sm font-medium">{day.date.getDate()}</div>
                  {day.entries.length > 0 && (
                    <div className="flex flex-wrap gap-1 mt-1">
                      {day.entries.map((entry) => (
                        <div
                          key={entry.id}
                          className="relative group"
                        >
                          <div
                            className="w-3 h-3 rounded-full cursor-pointer"
                            style={{
                              backgroundColor: entry.mood === 'good' ? '#10b981' : 
                                             entry.mood === 'normal' ? '#f59e0b' : '#ef4444'
                            }}
                          />
                          <div className="absolute bottom-full left-0 mb-2 w-48 p-2 bg-black text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity z-10">
                            <p className="font-bold">{getMoodText(entry.mood)}: {entry.summary.substring(0, 50)}...</p>
                            {entry.selectedEmotions && entry.selectedEmotions.length > 0 && (
                              <p className="mt-1">Í∞êÏ†ï: {entry.selectedEmotions.slice(0, 2).join(', ')}</p>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              ))}
            </div>

            <div className="mt-6 flex justify-center space-x-6">
              <div className="flex items-center space-x-2">
                <div className="w-4 h-4 bg-green-500 rounded-full"></div>
                <span className="text-sm">Ï¢ãÏùå</span>
              </div>
              <div className="flex items-center space-x-2">
                <div className="w-4 h-4 bg-yellow-500 rounded-full"></div>
                <span className="text-sm">Î≥¥ÌÜµ</span>
              </div>
              <div className="flex items-center space-x-2">
                <div className="w-4 h-4 bg-red-500 rounded-full"></div>
                <span className="text-sm">ÎÇòÏÅ®</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const renderSearch = () => {
    const searchResults = searchDiaries(searchQuery);

    return (
      <div className={`min-h-screen bg-gradient-to-br ${getCurrentTheme().bgClass} p-4`}>
        <div className="max-w-4xl mx-auto">
          {renderUserProgress()}
          
          <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold">üîç ÏùºÍ∏∞ Í≤ÄÏÉâ</h2>
              <button
                onClick={() => setCurrentStep('mood')}
                className="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600"
              >
                üè† ÌôàÏúºÎ°ú
              </button>
            </div>

            <div className="mb-6">
              <input
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="Í∞êÏ†ï, ÌÇ§ÏõåÎìú, Ïï°ÏÖòÏïÑÏù¥ÌÖú, ÏùåÏïÖ Ï†úÎ™©ÏúºÎ°ú Í≤ÄÏÉâÌïòÏÑ∏Ïöî..."
                className={`w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-${getCurrentTheme().accent}`}
              />
              <p className="text-sm text-gray-500 mt-2">
                Ï¥ù {diaryEntries.length}Í∞úÏùò ÏùºÍ∏∞ÏóêÏÑú Í≤ÄÏÉâÌï©ÎãàÎã§
              </p>
            </div>

            <div className="space-y-4">
              {searchQuery.trim() === '' ? (
                <div className="text-center py-12">
                  <p className="text-gray-500 text-lg">Í≤ÄÏÉâÏñ¥Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî</p>
                  <p className="text-gray-400 text-sm mt-2">Í∞êÏ†ï, ÌÇ§ÏõåÎìú, ÏùåÏïÖ Ï†úÎ™© Îì±ÏúºÎ°ú Í≤ÄÏÉâÌï† Ïàò ÏûàÏñ¥Ïöî</p>
                </div>
              ) : searchResults.length === 0 ? (
                <div className="text-center py-12">
                  <p className="text-gray-500 text-lg">'{searchQuery}'Ïóê ÎåÄÌïú Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§</p>
                  <p className="text-gray-400 text-sm mt-2">Îã§Î•∏ ÌÇ§ÏõåÎìúÎ°ú Í≤ÄÏÉâÌï¥Î≥¥ÏÑ∏Ïöî</p>
                </div>
              ) : (
                <>
                  <p className="text-sm text-gray-600 mb-4">
                    '{searchQuery}'Ïóê ÎåÄÌïú Í≤ÄÏÉâ Í≤∞Í≥º {searchResults.length}Í∞ú
                  </p>
                  {searchResults.map((entry) => (
                    <div key={entry.id} className={`bg-gradient-to-r ${getCurrentTheme().secondary} rounded-lg p-4 border border-${getCurrentTheme().accent.split('-')[0]}-200`}>
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center space-x-3">
                          <span className="text-2xl">{getMoodEmoji(entry.mood)}</span>
                          <div>
                            <p className="font-medium">{entry.date} {entry.time}</p>
                            <p className="text-sm text-gray-600">{entry.summary}</p>
                          </div>
                        </div>
                        <button
                          onClick={() => moveToTrash(entry)}
                          className="text-red-500 hover:text-red-700 p-1 rounded"
                          title="Ìú¥ÏßÄÌÜµÏúºÎ°ú Ïù¥Îèô"
                        >
                          üóëÔ∏è
                        </button>
                      </div>
                      
                      {entry.selectedEmotions && entry.selectedEmotions.length > 0 && (
                        <div className="mt-2">
                          <p className="text-sm text-gray-500">
                            Í∞êÏ†ï: {entry.selectedEmotions.join(', ')}
                          </p>
                        </div>
                      )}
                      
                      {entry.keywords && entry.keywords.length > 0 && (
                        <div className="mt-2">
                          <p className="text-sm text-gray-500">
                            ÌÇ§ÏõåÎìú: {entry.keywords.join(', ')}
                          </p>
                        </div>
                      )}
                      
                      {entry.actionItems && entry.actionItems.length > 0 && (
                        <div className="mt-2">
                          <p className="text-sm text-gray-500">
                            Ïï°ÏÖòÏïÑÏù¥ÌÖú: {entry.actionItems.join(', ')}
                          </p>
                        </div>
                      )}
                      
                      {entry.musicPlayed && entry.musicPlayed.length > 0 && (
                        <div className="mt-2">
                          <p className="text-sm text-gray-500">
                            ÏùåÏïÖ: {entry.musicPlayed.map(m => m.title).join(', ')}
                          </p>
                        </div>
                      )}
                    </div>
                  ))}
                </>
              )}
            </div>
          </div>
        </div>
      </div>
    );
  };

  // ÌÜµÍ≥ÑÏôÄ Îã¨Î†•ÏùÑ Ìï©Ïπú renderStats Ìï®Ïàò
  const renderStats = () => {
    // Í∞êÏ†ïÎ≥Ñ ÌÜµÍ≥Ñ Í≥ÑÏÇ∞
    const moodStats = ['good', 'normal', 'bad'].map(mood => {
      const count = diaryEntries.filter(entry => entry.mood === mood).length;
      const percentage = diaryEntries.length > 0 ? (count / diaryEntries.length) * 100 : 0;
      return { mood, count, percentage };
    });

    // Í∞êÏ†ï ÎπàÎèÑ ÌÜµÍ≥Ñ
    const emotionFreq: { [key: string]: number } = {};
    diaryEntries.forEach(entry => {
      entry.selectedEmotions?.forEach(emotion => {
        emotionFreq[emotion] = (emotionFreq[emotion] || 0) + 1;
      });
    });

    const topEmotions = Object.entries(emotionFreq)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5);

    // Îã¨Î†• Îç∞Ïù¥ÌÑ∞
    const monthNames = ['1Ïõî', '2Ïõî', '3Ïõî', '4Ïõî', '5Ïõî', '6Ïõî', '7Ïõî', '8Ïõî', '9Ïõî', '10Ïõî', '11Ïõî', '12Ïõî'];
    const dayNames = ['Ïùº', 'Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†'];

    const getCalendarData = (month: Date) => {
      const startOfMonth = new Date(month.getFullYear(), month.getMonth(), 1);
      const startDate = new Date(startOfMonth);
      startDate.setDate(startDate.getDate() - startDate.getDay());

      const calendarData = [];
      const currentDate = new Date(startDate);

      for (let week = 0; week < 6; week++) {
        const weekData = [];
        for (let day = 0; day < 7; day++) {
          const dayEntries = diaryEntries.filter(entry => {
            const entryDate = new Date(entry.date);
            return entryDate.toDateString() === currentDate.toDateString();
          });

          weekData.push({
            date: new Date(currentDate),
            entries: dayEntries,
            isCurrentMonth: currentDate.getMonth() === month.getMonth(),
            isToday: currentDate.toDateString() === new Date().toDateString()
          });

          currentDate.setDate(currentDate.getDate() + 1);
        }
        calendarData.push(weekData);
      }

      return calendarData;
    };

    const calendarData = getCalendarData(currentCalendarMonth);

    return (
      <div className={`min-h-screen bg-gradient-to-br ${getCurrentTheme().bgClass} p-4`}>
        <div className="max-w-4xl mx-auto">
          {renderUserProgress()}
          
          <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold">üìä ÌÜµÍ≥Ñ & üìÖ Í∞êÏ†ï Îã¨Î†•</h2>
              <button
                onClick={() => setCurrentStep('mood')}
                className="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600"
              >
                üè† ÌôàÏúºÎ°ú
              </button>
            </div>

            {/* ÌÜµÍ≥Ñ ÏÑπÏÖò */}
            <div className="mb-8">
              <h3 className="text-xl font-bold mb-4">üìä ÌÜµÍ≥Ñ</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                <div className={`bg-gradient-to-r ${getCurrentTheme().primary} text-white p-6 rounded-lg`}>
                  <h4 className="text-lg font-semibold mb-2">Ï¥ù ÏùºÍ∏∞ Ïàò</h4>
                  <p className="text-3xl font-bold">{diaryEntries.length}</p>
                </div>
                <div className="bg-gradient-to-r from-blue-500 to-cyan-500 text-white p-6 rounded-lg">
                  <h4 className="text-lg font-semibold mb-2">Ï†ÄÏû•Îêú ÏùåÏïÖ</h4>
                  <p className="text-3xl font-bold">{personalMusic.length}</p>
                </div>
                <div className="bg-gradient-to-r from-green-500 to-teal-500 text-white p-6 rounded-lg">
                  <h4 className="text-lg font-semibold mb-2">ÌòÑÏû¨ Î†àÎ≤®</h4>
                  <p className="text-3xl font-bold">{userProgress.level}</p>
                </div>
                <div className="bg-gradient-to-r from-yellow-500 to-orange-500 text-white p-6 rounded-lg">
                  <h4 className="text-lg font-semibold mb-2">Ï¥ù Í≤ΩÌóòÏπò</h4>
                  <p className="text-3xl font-bold">{userProgress.experience}</p>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                <div className="bg-gray-50 p-6 rounded-lg">
                  <h4 className="text-lg font-semibold mb-4">Í∏∞Î∂Ñ Î∂ÑÌè¨</h4>
                  <div className="space-y-3">
                    {moodStats.map(({ mood, count, percentage }) => (
                      <div key={mood} className="flex items-center space-x-3">
                        <span className="text-2xl">{getMoodEmoji(mood)}</span>
                        <div className="flex-1">
                          <div className="flex justify-between text-sm mb-1">
                            <span>{getMoodText(mood)}</span>
                            <span>{count}Í∞ú ({percentage.toFixed(1)}%)</span>
                          </div>
                          <div className={`w-full bg-${getCurrentTheme().accent.split('-')[0]}-100 rounded-full h-2`}>
                            <div
                              className={`bg-gradient-to-r ${getCurrentTheme().primary} h-2 rounded-full transition-all`}
                              style={{ width: `${percentage}%` }}
                            />
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                <div className="bg-gray-50 p-6 rounded-lg">
                  <h4 className="text-lg font-semibold mb-4">ÏûêÏ£º ÎäêÎÅºÎäî Í∞êÏ†ï TOP 5</h4>
                  <div className="space-y-2">
                    {topEmotions.length > 0 ? (
                      topEmotions.map(([emotion, count], index) => (
                        <div key={emotion} className="flex items-center justify-between">
                          <div className="flex items-center space-x-2">
                            <span className="text-lg">{index + 1}</span>
                            <span className="font-medium">{emotion}</span>
                          </div>
                          <span className="text-sm text-gray-600">{count}Ìöå</span>
                        </div>
                      ))
                    ) : (
                      <p className="text-gray-500 text-sm">ÏïÑÏßÅ Í∞êÏ†ï Îç∞Ïù¥ÌÑ∞Í∞Ä Î∂ÄÏ°±Ìï¥Ïöî</p>
                    )}
                  </div>
                </div>
              </div>
            </div>

            {/* Îã¨Î†• ÏÑπÏÖò */}
            <div>
              <h3 className="text-xl font-bold mb-4">üìÖ Í∞êÏ†ï Îã¨Î†•</h3>
              
              <div className="flex items-center justify-between mb-6">
                <button
                  onClick={() => {
                    const newMonth = new Date(currentCalendarMonth);
                    newMonth.setMonth(newMonth.getMonth() - 1);
                    setCurrentCalendarMonth(newMonth);
                  }}
                  className={`px-4 py-2 bg-gradient-to-r ${getCurrentTheme().primary} text-white rounded-lg hover:opacity-90`}
                >
                  ‚Üê Ïù¥Ï†Ñ
                </button>
                <h4 className="text-lg font-bold">
                  {currentCalendarMonth.getFullYear()}ÎÖÑ {monthNames[currentCalendarMonth.getMonth()]}
                </h4>
                <button
                  onClick={() => {
                    const newMonth = new Date(currentCalendarMonth);
                    newMonth.setMonth(newMonth.getMonth() + 1);
                    setCurrentCalendarMonth(newMonth);
                  }}
                  className={`px-4 py-2 bg-gradient-to-r ${getCurrentTheme().primary} text-white rounded-lg hover:opacity-90`}
                >
                  Îã§Ïùå ‚Üí
                </button>
              </div>

              <div className="grid grid-cols-7 gap-1 mb-2">
                {dayNames.map((day) => (
                  <div key={day} className="p-2 text-center font-semibold text-gray-600">
                    {day}
                  </div>
                ))}
              </div>

              <div className="grid grid-cols-7 gap-1 mb-4">
                {calendarData.flat().map((day, index) => (
                  <div
                    key={index}
                    className={`p-2 h-16 border rounded ${
                      day.isCurrentMonth ? 'bg-white' : 'bg-gray-100'
                    } ${day.isToday ? `ring-2 ring-${getCurrentTheme().accent}` : ''}`}
                  >
                    <div className="text-xs font-medium">{day.date.getDate()}</div>
                    {day.entries.length > 0 && (
                      <div className="flex flex-wrap gap-1 mt-1">
                        {day.entries.map((entry) => (
                          <div
                            key={entry.id}
                            className="relative group"
                          >
                            <div
                              className="w-2 h-2 rounded-full cursor-pointer"
                              style={{
                                backgroundColor: entry.mood === 'good' ? '#10b981' : 
                                               entry.mood === 'normal' ? '#f59e0b' : '#ef4444'
                              }}
                            />
                            <div className="absolute bottom-full left-0 mb-2 w-40 p-2 bg-black text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity z-10">
                              <p className="font-bold">{getMoodText(entry.mood)}: {entry.summary.substring(0, 30)}...</p>
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                ))}
              </div>

              <div className="flex justify-center space-x-6">
                <div className="flex items-center space-x-2">
                  <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                  <span className="text-xs">Ï¢ãÏùå</span>
                </div>
                <div className="flex items-center space-x-2">
                  <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
                  <span className="text-xs">Î≥¥ÌÜµ</span>
                </div>
                <div className="flex items-center space-x-2">
                  <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                  <span className="text-xs">ÎÇòÏÅ®</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const renderSettings = () => (
    <div className={`min-h-screen bg-gradient-to-br ${getCurrentTheme().bgClass} p-4`}>
      <div className="max-w-4xl mx-auto">
        {renderUserProgress()}
        
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold">‚öôÔ∏è ÏÑ§Ï†ï</h2>
            <button
              onClick={() => setCurrentStep('mood')}
              className="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600"
            >
              üè† ÌôàÏúºÎ°ú
            </button>
          </div>

          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-bold mb-3">AI Ïù¥Î¶Ñ ÏÑ§Ï†ï (ÌòÑÏû¨: {appSettings.aiName})</h3>
              <div className="grid grid-cols-3 gap-2">
                {AI_NAMES.map((name) => (
                  <button
                    key={name}
                    onClick={() => {
                      setAppSettings(prev => ({ ...prev, aiName: name }));
                      alert(`AI Ïù¥Î¶ÑÏù¥ ${name}Î°ú Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§!`);
                    }}
                    className={`px-4 py-2 rounded-lg text-sm font-medium transition-all ${
                      appSettings.aiName === name
                        ? 'bg-white text-purple-800 shadow-lg border-2 border-purple-500'
                        : `bg-gray-200 text-gray-700 hover:bg-${getCurrentTheme().accent.split('-')[0]}-100 hover:text-${getCurrentTheme().accent.split('-')[0]}-800`
                    }`}
                  >
                    {name}
                  </button>
                ))}
              </div>
            </div>

            <div>
              <h3 className="text-lg font-bold mb-3">ÌÖåÎßà ÏÑ§Ï†ï (ÌòÑÏû¨: {getCurrentTheme().name})</h3>
              <div className="grid grid-cols-3 gap-2">
                {Object.entries(THEMES).map(([key, theme]) => (
                  <button
                    key={key}
                    onClick={() => {
                      setAppSettings(prev => ({ ...prev, theme: key as 'purple' | 'blue' | 'pink' }));
                      alert(`ÌÖåÎßàÍ∞Ä ${theme.name}Î°ú Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§!`);
                    }}
                    className={`px-4 py-2 rounded-lg text-sm font-medium transition-all ${
                      appSettings.theme === key
                        ? 'bg-white text-purple-800 shadow-lg border-2 border-purple-500'
                        : `bg-gray-200 text-gray-700 hover:bg-${getCurrentTheme().accent.split('-')[0]}-100 hover:text-${getCurrentTheme().accent.split('-')[0]}-800`
                    }`}
                  >
                    {theme.name}
                  </button>
                ))}
              </div>
            </div>

            <div>
              <h3 className="text-lg font-bold mb-3">ÏùåÏïÖ Ï§ëÎ≥µ Î∞©ÏßÄ ÏÑ§Ï†ï</h3>
              <div className="bg-gray-50 p-4 rounded-lg">
                <p className="text-sm text-gray-600 mb-2">ÏÇ¨Ïö©Îêú ÏùåÏïÖ ID Í∞úÏàò: {usedMusicIds.size}Í∞ú</p>
                <button
                  onClick={() => {
                    if (window.confirm('ÏùåÏïÖ Ï§ëÎ≥µ Î∞©ÏßÄ Í∏∞Î°ùÏùÑ Ï¥àÍ∏∞ÌôîÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
                      setUsedMusicIds(new Set());
                      alert('ÏùåÏïÖ Ï§ëÎ≥µ Î∞©ÏßÄ Í∏∞Î°ùÏù¥ Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§.');
                    }
                  }}
                  className="px-3 py-1 bg-blue-500 text-white rounded text-sm hover:bg-blue-600"
                >
                  Ï§ëÎ≥µ Î∞©ÏßÄ Í∏∞Î°ù Ï¥àÍ∏∞Ìôî
                </button>
              </div>
            </div>

            <div>
              <h3 className="text-lg font-bold mb-3">Ïï± Ï†ïÎ≥¥</h3>
              <div className="bg-gray-50 p-4 rounded-lg">
                <p className="text-sm text-gray-600 mb-2">Î≤ÑÏ†Ñ: 2.4.0 (API ÏµúÏ†ÅÌôî ÏóÖÎç∞Ïù¥Ìä∏)</p>
                <p className="text-sm text-gray-600 mb-2">Ï¥ù Í∏∞Î°ù: {diaryEntries.length}Í∞ú</p>
                <p className="text-sm text-gray-600 mb-2">Ï†ÄÏû•Îêú ÏùåÏïÖ: {personalMusic.length}Í∞ú</p>
                <p className="text-sm text-gray-600 mb-2">Ìú¥ÏßÄÌÜµ: {trashEntries.length}Í∞ú</p>
                <p className="text-sm text-gray-600 mb-2">ÌòÑÏû¨ Î†àÎ≤®: {userProgress.level}</p>
                <p className="text-sm text-gray-600">AI Ïù¥Î¶Ñ: {appSettings.aiName}</p>
              </div>
            </div>

            <div>
              <h3 className="text-lg font-bold mb-3 text-red-600">Î™®Îì† Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú</h3>
              <div className="bg-red-50 p-4 rounded-lg border border-red-200">
                <button
                  onClick={() => {
                    if (window.confirm('Ï†ïÎßêÎ°ú Î™®Îì† Îç∞Ïù¥ÌÑ∞Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå? Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.')) {
                      if (window.confirm('ÎßàÏßÄÎßâ ÌôïÏù∏: Î™®Îì† ÏùºÍ∏∞, ÏùåÏïÖ, ÏÑ§Ï†ïÏù¥ ÏÇ≠Ï†úÎê©ÎãàÎã§. Í≥ÑÏÜçÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
                        localStorage.clear();
                        setDiaryEntries([]);
                        setPersonalMusic([]);
                        setTrashEntries([]);
                        setUsedMusicIds(new Set());
                        setUserProgress({
                          level: 1,
                          experience: 0,
                          totalEntries: 0,
                          consecutiveDays: 0,
                          expToNext: 100,
                          progressPercentage: 0,
                          isPremium: false
                        });
                        setTokenUsage(0);
                        alert('Î™®Îì† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
                      }
                    }
                  }}
                  className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 text-sm"
                >
                  Î™®Îì† Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
                </button>
                <p className="text-xs text-red-600 mt-2">
                  Ï£ºÏùò: Ïù¥ Í∏∞Îä•ÏùÄ Î™®Îì† ÏùºÍ∏∞, ÏùåÏïÖ, ÏÑ§Ï†ïÏùÑ ÏôÑÏ†ÑÌûà ÏÇ≠Ï†úÌï©ÎãàÎã§.
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  // Î©îÏù∏ Î†åÎçîÎßÅ
  if (!isAuthenticated) {
    return renderLogin();
  }

  switch (currentStep) {
    case 'mood':
      return renderMoodSelection();
    case 'chat':
      return renderChat();
    case 'genre':
      return renderGenreSelection();
    case 'music':
      return renderMusicPlayer();
    case 'summary':
      return renderSummary();
    case 'myDiary':
      return renderMyDiary();
    case 'myMusic':
      return renderMyMusic();
    case 'trash':
      return renderTrash();
    case 'calendar':
      return renderCalendar();
    case 'search':
      return renderSearch();
    case 'stats':
      return renderStats();
    case 'settings':
      return renderSettings();
    default:
      return renderMoodSelection();
  }
};

export default App;